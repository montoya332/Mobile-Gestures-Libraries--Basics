{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"// /*\n//  *         ________                                                            ________\n//  *         ______(_)_____ ____  __________________  __ _____________________   ______(_)_______\n//  *         _____  /_  __ `/  / / /  _ \\_  ___/_  / / / ___  __ \\  _ \\__  __ \\  _____  /__  ___/\n//  *         ____  / / /_/ // /_/ //  __/  /   _  /_/ /____  /_/ /  __/_  /_/ /______  / _(__  )\n//  *         ___  /  \\__, / \\__,_/ \\___//_/    _\\__, /_(_)  .___/\\___/_  .___/_(_)__  /  /____/\n//  *         /___/     /_/                     /____/    /_/          /_/        /___/\n//  *\n//  *        http://pep.briangonzalez.org\n//  *        Kinetic drag for mobile/desktop.\n//  *\n//  *        Copyright (c) 2014 Brian Gonzalez\n//  *        Licensed under the MIT license.\n//  *\n//  *        Title generated using \"Speed\" @\n//  *        http://patorjk.com/software/taag/#p=display&f=Speed&t=jquery.pep.js\n//  */\n\n// ;(function ( $, window, undefined ) {\n\n//   \"use strict\";\n\n//   //  create the defaults once\n//   var pluginName = 'pep';\n//   var defaults   = {\n\n//     // Options\n//     // ----------------------------------------------------------------------------------------------\n//     // See ** https://github.com/briangonzalez/jquery.pep.js ** for fully documented options.\n//     // It was too hard to manage options here and in the readme.\n//     // ----------------------------------------------------------------------------------------------\n//     initiate:                       function(){},\n//     start:                          function(){},\n//     drag:                           function(){},\n//     stop:                           function(){},\n//     easing:                         null,\n//     rest:                           function(){},\n//     moveTo:                         false,\n//     callIfNotStarted:               ['stop', 'rest'],\n//     startThreshold:                 [0,0],\n//     grid:                           [1,1],\n//     debug:                          false,\n//     activeClass:                    'pep-active',\n//     multiplier:                     1,\n//     velocityMultiplier:             2.5,\n//     shouldPreventDefault:           true,\n//     allowDragEventPropagation:      true,\n//     stopEvents:                     '',\n//     hardwareAccelerate:             true,\n//     useCSSTranslation:              true,\n//     disableSelect:                  true,\n//     cssEaseString:                  \"cubic-bezier(0.190, 1.000, 0.220, 1.000)\",\n//     cssEaseDuration:                1000,\n//     shouldEase:                     true,\n//     droppable:                      false,\n//     droppableActiveClass:           'pep-dpa',\n//     overlapFunction:                false,\n//     constrainTo:                    false,\n//     removeMargins:                  true,\n//     place:                          true,\n//     deferPlacement:                 false,\n//     axis:                           null,\n//     forceNonCSS3Movement:           false,\n//     elementsWithInteraction:        'input',\n//     revert:                         false,\n//     revertAfter:                    'stop',\n//     revertIf:                       function(){ return true; },\n//     ignoreRightClick:               true,\n//     startPos:                       {\n//         left:                           null,\n//         top:                            null\n//     }\n//   };\n\n//   //  ---------------------------------\n//   //  -----  Our main Pep object  -----\n//   //  ---------------------------------\n//   function Pep( el, options ) {\n\n//     this.name = pluginName;\n\n//     // reference to our DOM object\n//     // and it's jQuery equivalent.\n//     this.el  = el;\n//     this.$el = $(el);\n\n//     //  merge in defaults\n//     this.options    = $.extend( {}, defaults, options) ;\n\n//     // store document/body so we don't need to keep grabbing them\n//     // throughout the code\n//     this.$document  = $(this.$el[0].ownerDocument);\n//     this.$body      = this.$document.find('body');\n\n//     //  Create our triggers based on touch/click device\n//     this.moveTrigger        = \"MSPointerMove touchmove mousemove\";\n//     this.startTrigger       = \"MSPointerDown touchstart mousedown\";\n//     this.stopTrigger        = \"MSPointerUp touchend mouseup\";\n//     this.startTriggerArray  = this.startTrigger.split(' ');\n//     this.moveTriggerArray   = this.moveTrigger.split(' ');\n//     this.stopTriggerArray   = this.stopTrigger.split(' ');\n//     this.stopEvents         = [ this.stopTrigger, this.options.stopEvents ].join(' ');\n\n//     if ( this.options.constrainTo === 'window' )\n//       this.$container = this.$document;\n//     else if ( this.options.constrainTo && (this.options.constrainTo !== 'parent') )\n//       this.$container = $(this.options.constrainTo);\n//     else\n//       this.$container = this.$el.parent();\n\n//     // IE need this\n//     if ( this.isPointerEventCompatible() )\n//       this.applyMSDefaults();\n\n//     this.CSSEaseHash    = this.getCSSEaseHash();\n//     this.scale          = 1;\n//     this.started        = false;\n//     this.disabled       = false;\n//     this.activeDropRegions = [];\n//     this.resetVelocityQueue();\n\n//     this.init();\n//     return this;\n//   }\n\n//   //  init();\n//   //    initialization logic\n//   //    you already have access to the DOM el and the options via the instance,\n//   //    e.g., this.el and this.options\n//   Pep.prototype.init = function () {\n\n//     if ( this.options.debug )\n//       this.buildDebugDiv();\n\n//     if ( this.options.disableSelect )\n//       this.disableSelect();\n\n//     // position the parent & place the object, if necessary.\n//     if ( this.options.place && !this.options.deferPlacement ) {\n//       this.positionParent();\n//       this.placeObject();\n//     }\n\n//     this.ev = {};       // to store our event movements\n//     this.pos = {};      // to store positions\n//     this.subscribe();\n//   };\n\n//   //  subscribe();\n//   //    useful in the event we want to programmatically\n//   //    interact with our Pep object.\n//   //      e.g.:     $('#pep').trigger('stop')\n//   Pep.prototype.subscribe = function () {\n//     var self = this;\n\n//     // Subscribe to our start event\n//     this.onStartEvent = function(ev){ self.handleStart(ev); };\n//     this.$el.on(this.startTrigger, this.onStartEvent);\n\n//     // Prevent start events from being gobbled by elements that should allow user interaction\n//     this.onStartEventOnElementsWithInteraction = function(ev){ ev.stopPropagation(); };\n//     this.$el.on(\n//       this.startTrigger,\n//       this.options.elementsWithInteraction,\n//       this.onStartEventOnElementsWithInteraction\n//     );\n\n//     // Subscribe to our stop event\n//     this.onStopEvents = function(ev) { self.handleStop(ev); };\n//     this.$document.on(this.stopEvents, this.onStopEvents);\n\n//     // Subscribe to our move event\n//     this.onMoveEvents = function(ev){ self.moveEvent = ev; };\n//     this.$document.on(this.moveTrigger, this.onMoveEvents);\n//   };\n\n//   Pep.prototype.unsubscribe = function() {\n//     this.$el.off(this.startTrigger, this.onStartEvent);\n//     this.$el.off(\n//       this.startTrigger,\n//       this.options.elementsWithInteraction,\n//       this.onStartEventOnElementsWithInteraction\n//     );\n//     this.$document.off(this.stopEvents, this.onStopEvents);\n//     this.$document.off(this.moveTrigger, this.onMoveEvents);\n//   };\n\n//   //  handleStart();\n//   //    once this.startTrigger occurs, handle all of the logic\n//   //    that must go on. This is where Pep's heavy lifting is done.\n//   Pep.prototype.handleStart = function(ev) {\n//     var self = this;\n\n//             // only continue chugging if our start event is a valid move event.\n//             if ( this.isValidMoveEvent(ev) && !this.disabled ){\n\n//               if( !(this.options.ignoreRightClick && ev.which === 3) ) {\n\n//                     // IE10 Hack. Me not happy.\n//                     if ( this.isPointerEventCompatible() && ev.preventManipulation )\n//                       ev.preventManipulation();\n\n//                     // normalize event\n//                     ev = this.normalizeEvent(ev);\n\n//                     // position the parent & place the object, if necessary.\n//                     if ( this.options.place && this.options.deferPlacement ) {\n//                       this.positionParent();\n//                       this.placeObject();\n//                     }\n\n//                     // log it\n//                     this.log({ type: 'event', event: ev.type });\n\n//                     // hardware accelerate, if necessary.\n//                     if ( this.options.hardwareAccelerate && !this.hardwareAccelerated ) {\n//                       this.hardwareAccelerate();\n//                       this.hardwareAccelerated = true;\n//                     }\n\n//                     // fire user's initiate event.\n//                     var shouldContinue = this.options.initiate.call(this, ev, this);\n//                     if ( shouldContinue === false )\n//                       return;\n\n//                     // cancel the rest timeout\n//                     clearTimeout( this.restTimeout );\n\n//                     // add active class and reset css animation, if necessary\n//                     this.$el.addClass( this.options.activeClass );\n//                     this.removeCSSEasing();\n\n//                     // store event's x & y values for later use\n//                     this.startX = this.ev.x = ev.pep.x;\n//                     this.startY = this.ev.y = ev.pep.y;\n\n//                     // store initial offset.\n//                     this.initialPosition = this.initialPosition || this.$el.position();\n\n//                     // store the initial touch/click event, used to calculate the inital delta values.\n//                     this.startEvent = this.moveEvent = ev;\n\n//                     // make object active, so watchMoveLoop starts looping.\n//                     this.active     = true;\n\n//                     // preventDefault(), is necessary\n//                     if ( this.options.shouldPreventDefault )\n//                       ev.preventDefault();\n\n//                     // allow / disallow event bubbling\n//                     if ( !this.options.allowDragEventPropagation )\n//                       ev.stopPropagation();\n\n//                     // animation loop to ensure we don't fire\n//                     // too many unneccessary repaints\n//                     (function watchMoveLoop(){\n//                         if ( !self.active ) return;\n//                         self.handleMove();\n//                         self.requestAnimationFrame( watchMoveLoop );\n//                     })();\n\n//                     (function watchEasingLoop(){\n//                         if ( !self.options.easing ) return;\n//                         if ( self.easing ) self.options.easing.call(self, null, self);\n//                         self.requestAnimationFrame( watchEasingLoop );\n//                     })();\n//               }\n//             }\n//   };\n\n//   //  handleMove();\n//   //    the logic for when the move events occur\n//   Pep.prototype.handleMove = function() {\n\n//             // setup our event object\n//             if ( typeof(this.moveEvent) === 'undefined' )\n//               return;\n\n//             // get our move event's x & y\n//             var ev      = this.normalizeEvent( this.moveEvent );\n//             var curX    = window.parseInt(ev.pep.x / this.options.grid[0]) * this.options.grid[0];\n//             var curY    = window.parseInt(ev.pep.y / this.options.grid[1]) * this.options.grid[1];\n\n//             // last in, first out (LIFO) queue to help us manage velocity\n//             this.addToLIFO( { time: ev.timeStamp, x: curX, y: curY } );\n\n//             // calculate values necessary to moving\n//             var dx, dy;\n\n//             if ( $.inArray( ev.type, this.startTriggerArray ) > -1  ){\n//               dx = 0;\n//               dy = 0;\n//             } else{\n//               dx = curX - this.ev.x;\n//               dy = curY - this.ev.y;\n//             }\n\n//             this.dx   = dx;\n//             this.dy   = dy;\n//             this.ev.x = curX;\n//             this.ev.y = curY;\n\n//             // no movement in either direction -- so return\n//             if (dx === 0 && dy === 0){\n//               this.log({ type: 'event', event: '** stopped **' });\n//               return;\n//             }\n\n//             // check if object has moved past X/Y thresholds\n//             // if so, fire users start event\n//             var initialDx  = Math.abs(this.startX - curX);\n//             var initialDy  = Math.abs(this.startY - curY);\n//             if ( !this.started && ( initialDx > this.options.startThreshold[0] || initialDy > this.options.startThreshold[1] ) ){\n//               this.started = true;\n//               this.$el.addClass('pep-start');\n//               this.options.start.call(this, this.startEvent, this);\n//             }\n\n//             // Calculate our drop regions\n//             if ( this.options.droppable ) {\n//               this.calculateActiveDropRegions();\n//             }\n\n//             // fire user's drag event.\n//             var continueDrag = this.options.drag.call(this, ev, this);\n\n//             if ( continueDrag === false ) {\n//               this.resetVelocityQueue();\n//               return;\n//             }\n\n//             // log the move trigger & event position\n//             this.log({ type: 'event', event: ev.type });\n//             this.log({ type: 'event-coords', x: this.ev.x, y: this.ev.y });\n//             this.log({ type: 'velocity' });\n\n//             this.doMoveTo(dx, dy);\n//   };\n\n//   Pep.prototype.doMoveTo = function(dx, dy) {\n//             var hash = this.handleConstraint(dx, dy);\n//             var xOp, yOp;\n\n//             // if using not using CSS transforms, move object via absolute position\n//             if ( typeof this.options.moveTo === 'function') {\n//               xOp     = ( dx >= 0 ) ? \"+=\" + Math.abs(dx/this.scale)*this.options.multiplier : \"-=\" + Math.abs(dx/this.scale)*this.options.multiplier;\n//               yOp     = ( dy >= 0 ) ? \"+=\" + Math.abs(dy/this.scale)*this.options.multiplier : \"-=\" + Math.abs(dy/this.scale)*this.options.multiplier;\n\n//               if ( this.options.constrainTo ) {\n//                 xOp = (hash.x !== false) ? hash.x : xOp;\n//                 yOp = (hash.y !== false) ? hash.y : yOp;\n//               }\n\n//               // only move along single axis, if necessary\n//               if ( this.options.axis  === 'x' ) yOp = hash.y;\n//               if ( this.options.axis  === 'y' ) xOp = hash.x;\n\n//               this.options.moveTo.call(this, xOp, yOp);\n//             } else if ( !this.shouldUseCSSTranslation() ){\n//               xOp     = ( dx >= 0 ) ? \"+=\" + Math.abs(dx/this.scale)*this.options.multiplier : \"-=\" + Math.abs(dx/this.scale)*this.options.multiplier;\n//               yOp     = ( dy >= 0 ) ? \"+=\" + Math.abs(dy/this.scale)*this.options.multiplier : \"-=\" + Math.abs(dy/this.scale)*this.options.multiplier;\n\n//               if ( this.options.constrainTo ) {\n//                 xOp = (hash.x !== false) ? hash.x : xOp;\n//                 yOp = (hash.y !== false) ? hash.y : yOp;\n//               }\n\n//               // only move along single axis, if necessary\n//               if ( this.options.axis  === 'x' ) yOp = hash.y;\n//               if ( this.options.axis  === 'y' ) xOp = hash.x;\n\n//               this.moveTo(xOp, yOp);\n//             }\n//             else {\n\n//               dx = (dx/this.scale)*this.options.multiplier;\n//               dy = (dy/this.scale)*this.options.multiplier;\n\n//               if ( this.options.constrainTo ) {\n//                 dx = (hash.x === false) ? dx : 0 ;\n//                 dy = (hash.y === false) ? dy : 0 ;\n//               }\n\n//               // only move along single axis, if necessary\n//               if ( this.options.axis  === 'x' ) dy = 0;\n//               if ( this.options.axis  === 'y' ) dx = 0;\n\n//               this.moveToUsingTransforms( dx, dy );\n//             }\n//   };\n\n//   //  handleStop();\n//   //    the logic for when the stop events occur\n//   Pep.prototype.handleStop = function(ev) {\n\n//             // no need to handle stop event if we're not active\n//             if (!this.active)\n//               return;\n\n//             // log it\n//             this.log({ type: 'event', event: ev.type });\n\n//             // make object inactive, so watchMoveLoop returns\n//             this.active = false;\n\n//             // make object easing.\n//             this.easing = true;\n\n//             // remove our start class\n//             this.$el.removeClass('pep-start')\n//                     .addClass('pep-ease');\n\n//             // Calculate our drop regions\n//             if ( this.options.droppable ) {\n//               this.calculateActiveDropRegions();\n//             }\n\n//             // fire user's stop event.\n//             if ( this.started || (!this.started &&  $.inArray('stop', this.options.callIfNotStarted) > -1 ) ) {\n//               this.options.stop.call(this, ev, this);\n//             }\n\n//             // ease the object, if necessary.\n//             if (this.options.shouldEase) {\n//               this.ease(ev, this.started);\n//             } else {\n//               this.removeActiveClass();\n//             }\n\n//             if ( this.options.revert && (this.options.revertAfter === 'stop' || !this.options.shouldEase) && ( this.options.revertIf && this.options.revertIf.call(this) ) ) {\n//               this.revert();\n//             }\n\n//             // this must be set to false after\n//             // the user's stop event is called, so the dev\n//             // has access to it.\n//             this.started = false;\n\n//             // reset the velocity queue\n//             this.resetVelocityQueue();\n\n//   };\n\n//   //  ease();\n//   //    used in conjunction with the LIFO queue\n//   //    to ease the object after stop\n//   Pep.prototype.ease = function(ev, started){\n\n//             var pos       = this.$el.position();\n//             var vel       = this.velocity();\n//             var dt        = this.dt;\n//             var x         = (vel.x/this.scale) * this.options.multiplier;\n//             var y         = (vel.y/this.scale) * this.options.multiplier;\n\n//             var hash      = this.handleConstraint(x, y, true);\n\n//             // ✪  Apply the CSS3 animation easing magic  ✪\n//             if ( this.cssAnimationsSupported() )\n//               this.$el.css( this.getCSSEaseHash() );\n\n//             var xOp = ( vel.x > 0 ) ? \"+=\" + x : \"-=\" + Math.abs(x);\n//             var yOp = ( vel.y > 0 ) ? \"+=\" + y : \"-=\" + Math.abs(y);\n\n//             if ( this.options.constrainTo ) {\n//               xOp = (hash.x !== false) ? hash.x : xOp;\n//               yOp = (hash.y !== false) ? hash.y : yOp;\n//             }\n\n//             if ( this.options.axis  === 'x' ) yOp = \"+=0\";\n//             if ( this.options.axis  === 'y' ) xOp = \"+=0\";\n\n//             // ease it via JS, the last true tells it to animate.\n//             var jsAnimateFallback = !this.cssAnimationsSupported() || this.options.forceNonCSS3Movement;\n//             if (typeof this.options.moveTo === 'function') {\n//               this.options.moveTo.call(this, xOp, yOp);\n//             } else {\n//               this.moveTo(xOp, yOp, jsAnimateFallback);\n//             }\n\n//             // when the rest occurs, remove active class and call\n//             // user's rest event.\n//             var self = this;\n//             this.restTimeout = setTimeout( function(){\n\n//               // Calculate our drop regions\n//               if ( self.options.droppable ) {\n//                 self.calculateActiveDropRegions();\n//               }\n\n//               self.easing = false;\n\n//               // call users rest event.\n//               if ( started || ( !started && $.inArray('rest', self.options.callIfNotStarted) > -1 ) ) {\n//                 self.options.rest.call(self, ev, self);\n//               }\n\n//               // revert thy self!\n//               if ( self.options.revert && (self.options.revertAfter === 'ease' && self.options.shouldEase) && ( self.options.revertIf && self.options.revertIf.call(self) ) ) {\n//                 self.revert();\n//               }\n\n//               // remove active class\n//               self.removeActiveClass();\n\n//             }, this.options.cssEaseDuration );\n\n//   };\n\n//   // normalizeEvent()\n//   Pep.prototype.normalizeEvent = function(ev) {\n//       ev.pep        = {};\n\n//       if ( this.isPointerEventCompatible() || !this.isTouch(ev) ) {\n\n//         if ( ev.pageX  ) {\n//           ev.pep.x      = ev.pageX;\n//           ev.pep.y      = ev.pageY;\n//         } else {\n//           ev.pep.x      = ev.originalEvent.pageX;\n//           ev.pep.y      = ev.originalEvent.pageY;\n//         }\n\n//         ev.pep.type   = ev.type;\n\n//       }\n//       else {\n//         ev.pep.x      = ev.originalEvent.touches[0].pageX;\n//         ev.pep.y      = ev.originalEvent.touches[0].pageY;\n//         ev.pep.type   = ev.type;\n//       }\n\n//        return ev;\n//    };\n\n//   // resetVelocityQueue()\n//   //\n//   Pep.prototype.resetVelocityQueue = function() {\n//     this.velocityQueue = new Array(5);\n//   };\n\n//   //  moveTo();\n//   //    move the object to an x and/or y value\n//   //    using jQuery's .css function -- this fxn uses the\n//   //    .css({top: \"+=20\", left: \"-=30\"}) syntax\n//   Pep.prototype.moveTo = function(x,y, animate) {\n\n//     this.log({ type: 'delta', x: x, y: y });\n//     if ( animate ) {\n//       this.$el.animate({ top: y, left: x }, 0, 'easeOutQuad', {queue: false});\n//     } else{\n//       this.$el.stop(true, false).css({ top: y , left: x });\n//     }\n\n//   };\n\n//   //  moveToUsingTransforms();\n//   //    move the object to an x and/or y value\n//   Pep.prototype.moveToUsingTransforms = function(x,y) {\n\n//     // Check for our initial values if we don't have them.\n//     var matrixArray  = this.matrixToArray( this.matrixString() );\n//     if ( !this.cssX )\n//       this.cssX = this.xTranslation( matrixArray );\n\n//     if ( !this.cssY )\n//       this.cssY = this.yTranslation( matrixArray );\n\n//     // CSS3 transforms are additive from current position\n//     this.cssX = this.cssX + x;\n//     this.cssY = this.cssY + y;\n\n//     this.log({ type: 'delta', x: x, y: y });\n\n//     matrixArray[4]    = this.cssX;\n//     matrixArray[5]    = this.cssY;\n\n//     this.translation  = this.arrayToMatrix( matrixArray );\n//     this.transform( this.translation );\n//   };\n\n//   Pep.prototype.transform = function(value) {\n//     this.$el.css({\n//         '-webkit-transform': value,\n//            '-moz-transform': value,\n//             '-ms-transform': value,\n//              '-o-transform': value,\n//                 'transform': value  });\n//   };\n\n//   Pep.prototype.xTranslation = function(matrixArray) {\n//     matrixArray  = matrixArray || this.matrixToArray( this.matrixString() );\n//     return parseInt(matrixArray[4], 10);\n//   };\n\n//   Pep.prototype.yTranslation = function(matrixArray) {\n//     matrixArray  = matrixArray || this.matrixToArray( this.matrixString() );\n//     return parseInt(matrixArray[5], 10);\n//   };\n\n//   // 3 helper functions for working with the\n//   // objects CSS3 transforms\n//   // matrixString\n//   // matrixToArray\n//   // arrayToMatrix\n//   Pep.prototype.matrixString = function() {\n\n//     var validMatrix = function(o){\n//       return !( !o || o === 'none' || o.indexOf('matrix') < 0  );\n//     };\n\n//     var matrix = \"matrix(1, 0, 0, 1, 0, 0)\";\n\n//     if ( validMatrix( this.$el.css('-webkit-transform') ) )\n//       matrix = this.$el.css('-webkit-transform');\n\n//     if ( validMatrix( this.$el.css('-moz-transform') ) )\n//       matrix = this.$el.css('-moz-transform');\n\n//     if ( validMatrix( this.$el.css('-ms-transform') ) )\n//       matrix = this.$el.css('-ms-transform');\n\n//     if ( validMatrix( this.$el.css('-o-transform') ) )\n//       matrix = this.$el.css('-o-transform');\n\n//     if ( validMatrix( this.$el.css('transform') ) )\n//       matrix = this.$el.css('transform');\n\n//     return matrix;\n//   };\n\n//   Pep.prototype.matrixToArray = function(str) {\n//       return str.split('(')[1].split(')')[0].split(',');\n//   };\n\n//   Pep.prototype.arrayToMatrix = function(array) {\n//       return \"matrix(\" +  array.join(',')  + \")\";\n//   };\n\n//   //  addToLIFO();\n//   //    a Last-In/First-Out array of the 5 most recent\n//   //    velocity points, which is used for easing\n//   Pep.prototype.addToLIFO = function(val){\n//     // last in, first out\n//     var arr = this.velocityQueue;\n//     arr = arr.slice(1, arr.length);\n//     arr.push(val);\n//     this.velocityQueue = arr;\n//   };\n\n//   //  velocity();\n//   //    using the LIFO, calculate velocity and return\n//   //    velocity in each direction (x & y)\n//   Pep.prototype.velocity = function(){\n//     var sumX = 0;\n//     var sumY = 0;\n\n//     for ( var i = 0; i < this.velocityQueue.length -1; i++  ){\n//       if ( this.velocityQueue[i] ){\n//         sumX        += (this.velocityQueue[i+1].x - this.velocityQueue[i].x);\n//         sumY        += (this.velocityQueue[i+1].y - this.velocityQueue[i].y);\n//         this.dt     = ( this.velocityQueue[i+1].time - this.velocityQueue[i].time );\n//       }\n//     }\n\n//     // return velocity in each direction.\n//     return { x: sumX*this.options.velocityMultiplier, y: sumY*this.options.velocityMultiplier};\n//   };\n\n//   Pep.prototype.revert = function() {\n//     if ( this.shouldUseCSSTranslation() ){\n//       this.moveToUsingTransforms(-this.xTranslation(),-this.yTranslation());\n//     }\n\n//     this.moveTo(this.initialPosition.left, this.initialPosition.top);\n//   };\n\n//   //  requestAnimationFrame();\n//   //    requestAnimationFrame Polyfill\n//   //    More info:\n//   //    http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n//   Pep.prototype.requestAnimationFrame = function(callback) {\n//     return  window.requestAnimationFrame        && window.requestAnimationFrame(callback)         ||\n//             window.webkitRequestAnimationFrame  && window.webkitRequestAnimationFrame(callback)   ||\n//             window.mozRequestAnimationFrame     && window.mozRequestAnimationFrame(callback)      ||\n//             window.oRequestAnimationFrame       && window.mozRequestAnimationFrame(callback)      ||\n//             window.msRequestAnimationFrame      && window.msRequestAnimationFrame(callback)       ||\n//             window.setTimeout(callback, 1000 / 60);\n//   };\n\n//   //  positionParent();\n//   //    add the right positioning to the parent object\n//   Pep.prototype.positionParent = function() {\n\n//     if ( !this.options.constrainTo || this.parentPositioned )\n//       return;\n\n//     this.parentPositioned = true;\n\n//     // make `relative` parent if necessary\n//     if ( this.options.constrainTo === 'parent' ) {\n//       this.$container.css({ position: 'relative' });\n//     } else if ( this.options.constrainTo === 'window'             &&\n//                 this.$container.get(0).nodeName !== \"#document\"   &&\n//                 this.$container.css('position') !== 'static' )\n//     {\n//       this.$container.css({ position: 'static' });\n//     }\n\n//   };\n\n//   //  placeObject();\n//   //    add the right positioning to the object\n//   Pep.prototype.placeObject = function() {\n\n//     if ( this.objectPlaced )\n//       return;\n\n//     this.objectPlaced = true;\n\n//     this.offset = (this.options.constrainTo === 'parent' || this.hasNonBodyRelative() ) ?\n//                     this.$el.position() : this.$el.offset();\n\n//     // better to leave absolute position alone if\n//     // it already has one.\n//     if ( parseInt( this.$el.css('left'), 10 ) )\n//       this.offset.left = this.$el.css('left');\n\n//     if (typeof this.options.startPos.left === \"number\")\n//         this.offset.left = this.options.startPos.left;\n\n//     if ( parseInt( this.$el.css('top'), 10 ) )\n//       this.offset.top = this.$el.css('top');\n\n//     if (typeof this.options.startPos.top === \"number\")\n//         this.offset.top = this.options.startPos.top;\n\n//     if ( this.options.removeMargins )\n//       this.$el.css({margin: 0});\n\n//     this.$el.css({\n//       position:   'absolute',\n//       top:        this.offset.top,\n//       left:       this.offset.left\n//     });\n\n//   };\n\n//   //  hasNonBodyRelative()\n//   //    returns true if any parent other than the body\n//   //    has relative positioning\n//   Pep.prototype.hasNonBodyRelative = function() {\n//     return this.$el.parents().filter(function() {\n//         var $this = $(this);\n//         return $this.is('body') || $this.css('position') === 'relative';\n//     }).length > 1;\n//   };\n\n//   //  setScale()\n//   //    set the scale of the object being moved.\n//   Pep.prototype.setScale = function(val) {\n//     this.scale = val;\n//   };\n\n//   //  setMultiplier()\n//   //    set the multiplier of the object being moved.\n//   Pep.prototype.setMultiplier = function(val) {\n//     this.options.multiplier = val;\n//   };\n\n//   //  removeCSSEasing();\n//   //    remove CSS easing properties, if necessary\n//   Pep.prototype.removeCSSEasing = function() {\n//     if ( this.cssAnimationsSupported() )\n//       this.$el.css( this.getCSSEaseHash(true) );\n//   };\n\n//   //  disableSelect();\n//   //    add the property which causes the object\n//   //    to not be selected user drags over text areas\n//   Pep.prototype.disableSelect = function() {\n\n//     this.$el.css({\n//       '-webkit-touch-callout' : 'none',\n//         '-webkit-user-select' : 'none',\n//          '-khtml-user-select' : 'none',\n//            '-moz-user-select' : 'none',\n//             '-ms-user-select' : 'none',\n//                 'user-select' : 'none'\n//     });\n\n//   };\n\n//   // removeActiveClass()\n//   //  Removes the active class.\n//   Pep.prototype.removeActiveClass = function() {\n//     this.$el.removeClass( [this.options.activeClass, 'pep-ease'].join(' ') );\n//   };\n\n//   //  handleConstraint();\n//   //    returns a hash of where to move to\n//   //    when we constrain to parent/window\n//   Pep.prototype.handleConstraint = function(dx, dy, accountForTranslation) {\n//     var pos               = this.$el.position();\n//     this.pos.x            = pos.left;\n//     this.pos.y            = pos.top;\n\n//     var hash              = { x: false, y: false };\n\n//     var upperYLimit, upperXLimit, lowerXLimit, lowerYLimit;\n\n//     // log our positions\n//     this.log({ type: \"pos-coords\", x: this.pos.x, y: this.pos.y});\n\n//     if ( $.isArray( this.options.constrainTo ) ) {\n\n//       if ( this.options.constrainTo[3] !== undefined && this.options.constrainTo[1] !== undefined ) {\n//         upperXLimit     = this.options.constrainTo[1] === false ?  Infinity : this.options.constrainTo[1];\n//         lowerXLimit     = this.options.constrainTo[3] === false ? -Infinity : this.options.constrainTo[3];\n//       }\n//       if ( this.options.constrainTo[0] !== false && this.options.constrainTo[2] !== false ) {\n//         upperYLimit       = this.options.constrainTo[2] === false ?  Infinity : this.options.constrainTo[2];\n//         lowerYLimit       = this.options.constrainTo[0] === false ? -Infinity : this.options.constrainTo[0];\n//       }\n\n//       // is our object trying to move outside lower X & Y limits?\n//       if ( this.pos.x + dx < lowerXLimit)     hash.x = lowerXLimit;\n//       if ( this.pos.y + dy < lowerYLimit)     hash.y = lowerYLimit;\n\n//     } else if ( typeof this.options.constrainTo === 'string' ) {\n//       lowerXLimit       = 0;\n//       lowerYLimit       = 0;\n//       upperXLimit       = this.$container.width()  - this.$el.outerWidth();\n//       upperYLimit       = this.$container.height() - this.$el.outerHeight();\n\n//       // is our object trying to move outside lower X & Y limits?\n//       if ( this.pos.x + dx < 0 )              hash.x = 0;\n//       if ( this.pos.y + dy < 0 )              hash.y = 0;\n//     }\n\n//     // is our object trying to move outside upper X & Y limits?\n//     if ( this.pos.x + dx > upperXLimit )    hash.x = upperXLimit;\n//     if ( this.pos.y + dy > upperYLimit )    hash.y = upperYLimit;\n\n//     // Account for translation, which makes movement a little tricky.\n//     if ( this.shouldUseCSSTranslation() && accountForTranslation ){\n//       if (hash.x === lowerXLimit && this.xTranslation() ) hash.x = lowerXLimit - this.xTranslation();\n//       if (hash.x === upperXLimit && this.xTranslation() ) hash.x = upperXLimit - this.xTranslation();\n\n//       if (hash.y === lowerYLimit && this.yTranslation() ) hash.y = lowerYLimit - this.yTranslation();\n//       if (hash.y === upperYLimit && this.yTranslation() ) hash.y = upperYLimit - this.yTranslation();\n//     }\n\n//     return hash;\n//   };\n\n//   //  getCSSEaseHash();\n//   //    returns a hash of params used in conjunction\n//   //    with this.options.cssEaseString\n//   Pep.prototype.getCSSEaseHash = function(reset){\n//     if ( typeof(reset) === 'undefined' ) reset = false;\n\n//     var cssEaseString;\n//     if (reset){\n//       cssEaseString = '';\n//     } else if ( this.CSSEaseHash ) {\n//       return this.CSSEaseHash;\n//     } else {\n//       cssEaseString = ['all', this.options.cssEaseDuration + 'ms', this.options.cssEaseString].join(' ');\n//     }\n\n//     return {\n//                   '-webkit-transition'   : cssEaseString,   // chrome, safari, etc.\n//                      '-moz-transition'   : cssEaseString,   // firefox\n//                       '-ms-transition'   : cssEaseString,   // microsoft\n//                        '-o-transition'   : cssEaseString,   // opera\n//                           'transition'   : cssEaseString    // future\n//           };\n//   };\n\n//   // calculateActiveDropRegions()\n//   //    sets parent droppables of this.\n//   Pep.prototype.calculateActiveDropRegions = function() {\n//     var self = this;\n//     this.activeDropRegions.length = 0;\n\n//     $.each( $(this.options.droppable), function(idx, el){\n//       var $el = $(el);\n//       if ( self.isOverlapping($el, self.$el) ){\n//         $el.addClass(self.options.droppableActiveClass);\n//         self.activeDropRegions.push($el);\n//       } else {\n//         $el.removeClass(self.options.droppableActiveClass);\n//       }\n//     });\n\n//   };\n\n//   //  isOverlapping();\n//   //    returns true if element a over\n//   Pep.prototype.isOverlapping = function($a,$b) {\n\n//     if ( this.options.overlapFunction ) {\n//       return this.options.overlapFunction($a,$b);\n//     }\n\n//     var rect1 = $a[0].getBoundingClientRect();\n//     var rect2 = $b[0].getBoundingClientRect();\n\n//     return !( rect1.right   < rect2.left  ||\n//               rect1.left    > rect2.right ||\n//               rect1.bottom  < rect2.top   ||\n//               rect1.top     > rect2.bottom  );\n//   };\n\n//   //  isTouch();\n//   //    returns whether or not event is a touch event\n//   Pep.prototype.isTouch = function(ev){\n//     return ev.type.search('touch') > -1;\n//   };\n\n//   // isPointerEventCompatible();\n//   //    return whether or note our device is pointer\n//   //    event compatible; typically means where on a\n//   //    touch Win8 device\n//   Pep.prototype.isPointerEventCompatible = function() {\n//     return (\"MSPointerEvent\" in window);\n//   };\n\n//   // applyMSDefaults();\n//   Pep.prototype.applyMSDefaults = function(first_argument) {\n//     this.$el.css({\n//         '-ms-touch-action' :    'none',\n//         'touch-action' :        'none',\n//         '-ms-scroll-chaining':  'none',\n//         '-ms-scroll-limit':     '0 0 0 0'\n//     });\n//   };\n\n//   //  isValidMoveEvent();\n//   //    returns true if we're on a non-touch device -- or --\n//   //    if the event is **single** touch event on a touch device\n//   Pep.prototype.isValidMoveEvent = function(ev){\n//     return ( !this.isTouch(ev) || ( this.isTouch(ev) && ev.originalEvent && ev.originalEvent.touches && ev.originalEvent.touches.length === 1 ) );\n//   };\n\n//   //  shouldUseCSSTranslation();\n//   //    return true if we should use CSS transforms for move the object\n//   Pep.prototype.shouldUseCSSTranslation = function() {\n\n//     if ( this.options.forceNonCSS3Movement )\n//       return false;\n\n//     if ( typeof(this.useCSSTranslation) !== \"undefined\" )\n//       return this.useCSSTranslation;\n\n//     var useCSSTranslation = false;\n\n//     if ( !this.options.useCSSTranslation || ( typeof(Modernizr) !== \"undefined\" && !Modernizr.csstransforms)){\n//       useCSSTranslation = false;\n//     }\n//     else{\n//       useCSSTranslation = true;\n//     }\n\n//     this.useCSSTranslation =  useCSSTranslation;\n//     return useCSSTranslation;\n//   };\n\n//   //  cssAnimationsSupported():\n//   //    returns true if the browser supports CSS animations\n//   //    which are used for easing..\n//   Pep.prototype.cssAnimationsSupported = function() {\n\n//     if ( typeof(this.cssAnimationsSupport) !== \"undefined\" ){\n//       return this.cssAnimationsSupport;\n//     }\n\n//     // If the page has Modernizr, let them do the heavy lifting.\n//     if ( ( typeof(Modernizr) !== \"undefined\" && Modernizr.cssanimations) ){\n//       this.cssAnimationsSupport = true;\n//       return true;\n//     }\n\n//     var animation = false,\n//         elm = document.createElement('div'),\n//         animationstring = 'animation',\n//         keyframeprefix = '',\n//         domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),\n//         pfx  = '';\n\n//     if( elm.style.animationName ) { animation = true; }\n\n//     if( animation === false ) {\n//       for( var i = 0; i < domPrefixes.length; i++ ) {\n//         if( elm.style[ domPrefixes[i] + 'AnimationName' ] !== undefined ) {\n//           pfx = domPrefixes[ i ];\n//           animationstring = pfx + 'Animation';\n//           keyframeprefix = '-' + pfx.toLowerCase() + '-';\n//           animation = true;\n//           break;\n//         }\n//       }\n//     }\n\n//     this.cssAnimationsSupport = animation;\n//     return animation;\n//   };\n\n//   //  hardwareAccelerate();\n//   //    add fool-proof CSS3 hardware acceleration.\n//   Pep.prototype.hardwareAccelerate = function() {\n//     this.$el.css({\n//       '-webkit-perspective':          1000,\n//       'perspective':                  1000,\n//       '-webkit-backface-visibility':  'hidden',\n//       'backface-visibility':          'hidden'\n//     });\n//    };\n\n//   //  getMovementValues();\n//   //    returns object pos, event position, and velocity in each direction.\n//   Pep.prototype.getMovementValues = function() {\n//     return { ev: this.ev, pos: this.pos, velocity: this.velocity() };\n//    };\n\n//   //  buildDebugDiv();\n//   //    Create a little div in the lower right corner of the window\n//   //    for extra info about the object currently moving\n//   Pep.prototype.buildDebugDiv = function() {\n\n//     // Build the debugDiv and it's inner HTML -- if necessary\n//     var $debugDiv;\n//     if ( $('#pep-debug').length === 0 ){\n//       $debugDiv = $('<div></div>');\n//       $debugDiv\n//         .attr('id', 'pep-debug')\n//         .append(\"<div style='font-weight:bold; background: red; color: white;'>DEBUG MODE</div>\")\n//         .append(\"<div id='pep-debug-event'>no event</div>\")\n//         .append(\"<div id='pep-debug-ev-coords'>event coords: <span class='pep-x'>-</span>, <span class='pep-y'>-</span></div>\")\n//         .append(\"<div id='pep-debug-pos-coords'>position coords: <span class='pep-x'>-</span>, <span class='pep-y'>-</span></div>\")\n//         .append(\"<div id='pep-debug-velocity'>velocity: <span class='pep-x'>-</span>, <span class='pep-y'>-</span></div>\")\n//         .append(\"<div id='pep-debug-delta'>&Delta; movement: <span class='pep-x'>-</span>, <span class='pep-y'>-</span></div>\")\n//         .css({\n//           position:   'fixed',\n//           bottom:     5,\n//           right:      5,\n//           zIndex:     99999,\n//           textAlign:  'right',\n//           fontFamily: 'Arial, sans',\n//           fontSize:   10,\n//           border:     '1px solid #DDD',\n//           padding:    '3px',\n//           background: 'white',\n//           color:      '#333'\n//         });\n//     }\n\n//     var self = this;\n//     setTimeout(function(){\n//       self.debugElements = {\n//         $event:      $(\"#pep-debug-event\"),\n//         $velocityX:  $(\"#pep-debug-velocity .pep-x\"),\n//         $velocityY:  $(\"#pep-debug-velocity .pep-y\"),\n//         $dX:         $(\"#pep-debug-delta .pep-x\"),\n//         $dY:         $(\"#pep-debug-delta .pep-y\"),\n//         $evCoordsX:  $(\"#pep-debug-ev-coords .pep-x\"),\n//         $evCoordsY:  $(\"#pep-debug-ev-coords .pep-y\"),\n//         $posCoordsX: $(\"#pep-debug-pos-coords .pep-x\"),\n//         $posCoordsY: $(\"#pep-debug-pos-coords .pep-y\")\n//       };\n//     }, 0);\n\n//     $('body').append( $debugDiv );\n//   };\n\n//   // log()\n//   Pep.prototype.log = function(opts) {\n//     if ( !this.options.debug ) return;\n\n//     switch (opts.type){\n//     case \"event\":\n//       this.debugElements.$event.text(opts.event);\n//       break;\n//     case \"pos-coords\":\n//       this.debugElements.$posCoordsX.text(opts.x);\n//       this.debugElements.$posCoordsY.text(opts.y);\n//       break;\n//     case \"event-coords\":\n//       this.debugElements.$evCoordsX.text(opts.x);\n//       this.debugElements.$evCoordsY.text(opts.y);\n//       break;\n//     case \"delta\":\n//       this.debugElements.$dX.text(opts.x);\n//       this.debugElements.$dY.text(opts.y);\n//       break;\n//     case \"velocity\":\n//       var vel = this.velocity();\n//       this.debugElements.$velocityX.text( Math.round(vel.x) );\n//       this.debugElements.$velocityY.text( Math.round(vel.y) );\n//       break;\n//     }\n//   };\n\n//   // toggle()\n//   //  toggle the pep object\n//   Pep.prototype.toggle = function(on) {\n//     if ( typeof(on) === \"undefined\"){\n//       this.disabled = !this.disabled;\n//     }\n//     else {\n//       this.disabled = !on;\n//     }\n//   };\n\n//   //  *** Special Easings functions ***\n//   //    Used for JS easing fallback\n//   //    We can use any of these for a\n//   //    good intertia ease\n//   $.extend($.easing,\n//   {\n//     easeOutQuad: function (x, t, b, c, d) {\n//       return -c *(t/=d)*(t-2) + b;\n//     },\n//     easeOutCirc: function (x, t, b, c, d) {\n//       return c * Math.sqrt(1 - (t=t/d-1)*t) + b;\n//     },\n//     easeOutExpo: function (x, t, b, c, d) {\n//       return (t===d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;\n//     }\n//   });\n\n//   //  wrap it\n//   //    A really lightweight plugin wrapper around the constructor,\n//   //    preventing against multiple instantiations.\n//   $.fn[pluginName] = function ( options ) {\n//     return this.each(function () {\n//       if (!$.data(this, 'plugin_' + pluginName)) {\n//         var pepObj = new Pep( this, options );\n//         $.data(this, 'plugin_' + pluginName, pepObj);\n//         $.pep.peps.push(pepObj);\n//       }\n//     });\n//   };\n\n//   //  The   _   ___ ___\n//   //       /_\\ | _ \\_ _|\n//   //      / _ \\|  _/| |\n//   //     /_/ \\_\\_| |___|\n//   //\n//   $.pep = {};\n//   $.pep.peps = [];\n//   $.pep.toggleAll = function(on){\n//     $.each(this.peps, function(index, pepObj){\n//       pepObj.toggle(on);\n//     });\n//   };\n\n//   $.pep.unbind = function($obj){\n//     var pep = $obj.data('plugin_' + pluginName);\n\n//     if ( typeof pep === 'undefined' )\n//       return;\n\n//     pep.toggle(false);\n//     pep.unsubscribe();\n//     $obj.removeData('plugin_' + pluginName);\n\n//   };\n\n// }(jQuery, window));","ast":null,"map":{"version":3,"sources":[],"names":[],"mappings":"","file":"/client/styles/js/jqueryPep.js.map","sourcesContent":[]},"hash":"8f4a3322c4f3708239fa72ae63b375d9c6cfbb33"}
