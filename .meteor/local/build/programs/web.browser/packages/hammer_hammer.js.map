{"version":3,"sources":["meteor://ðŸ’»app/packages/hammer_hammer/packages/hammer_hammer.js"],"names":[],"mappingsfile":"/packages/hammer_hammer.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/hammer:hammer/hammer.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*! Hammer.JS - v2.0.4 - 2014-09-28                                                                                   // 1\n * http://hammerjs.github.io/                                                                                         // 2\n *                                                                                                                    // 3\n * Copyright (c) 2014 Jorik Tangelder;                                                                                // 4\n * Licensed under the MIT license */                                                                                  // 5\n(function(window, document, exportName, undefined) {                                                                  // 6\n  'use strict';                                                                                                       // 7\n                                                                                                                      // 8\nvar VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];                                                         // 9\nvar TEST_ELEMENT = document.createElement('div');                                                                     // 10\n                                                                                                                      // 11\nvar TYPE_FUNCTION = 'function';                                                                                       // 12\n                                                                                                                      // 13\nvar round = Math.round;                                                                                               // 14\nvar abs = Math.abs;                                                                                                   // 15\nvar now = Date.now;                                                                                                   // 16\n                                                                                                                      // 17\n/**                                                                                                                   // 18\n * set a timeout with a given scope                                                                                   // 19\n * @param {Function} fn                                                                                               // 20\n * @param {Number} timeout                                                                                            // 21\n * @param {Object} context                                                                                            // 22\n * @returns {number}                                                                                                  // 23\n */                                                                                                                   // 24\nfunction setTimeoutContext(fn, timeout, context) {                                                                    // 25\n    return setTimeout(bindFn(fn, context), timeout);                                                                  // 26\n}                                                                                                                     // 27\n                                                                                                                      // 28\n/**                                                                                                                   // 29\n * if the argument is an array, we want to execute the fn on each entry                                               // 30\n * if it aint an array we don't want to do a thing.                                                                   // 31\n * this is used by all the methods that accept a single and array argument.                                           // 32\n * @param {*|Array} arg                                                                                               // 33\n * @param {String} fn                                                                                                 // 34\n * @param {Object} [context]                                                                                          // 35\n * @returns {Boolean}                                                                                                 // 36\n */                                                                                                                   // 37\nfunction invokeArrayArg(arg, fn, context) {                                                                           // 38\n    if (Array.isArray(arg)) {                                                                                         // 39\n        each(arg, context[fn], context);                                                                              // 40\n        return true;                                                                                                  // 41\n    }                                                                                                                 // 42\n    return false;                                                                                                     // 43\n}                                                                                                                     // 44\n                                                                                                                      // 45\n/**                                                                                                                   // 46\n * walk objects and arrays                                                                                            // 47\n * @param {Object} obj                                                                                                // 48\n * @param {Function} iterator                                                                                         // 49\n * @param {Object} context                                                                                            // 50\n */                                                                                                                   // 51\nfunction each(obj, iterator, context) {                                                                               // 52\n    var i;                                                                                                            // 53\n                                                                                                                      // 54\n    if (!obj) {                                                                                                       // 55\n        return;                                                                                                       // 56\n    }                                                                                                                 // 57\n                                                                                                                      // 58\n    if (obj.forEach) {                                                                                                // 59\n        obj.forEach(iterator, context);                                                                               // 60\n    } else if (obj.length !== undefined) {                                                                            // 61\n        i = 0;                                                                                                        // 62\n        while (i < obj.length) {                                                                                      // 63\n            iterator.call(context, obj[i], i, obj);                                                                   // 64\n            i++;                                                                                                      // 65\n        }                                                                                                             // 66\n    } else {                                                                                                          // 67\n        for (i in obj) {                                                                                              // 68\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);                                          // 69\n        }                                                                                                             // 70\n    }                                                                                                                 // 71\n}                                                                                                                     // 72\n                                                                                                                      // 73\n/**                                                                                                                   // 74\n * extend object.                                                                                                     // 75\n * means that properties in dest will be overwritten by the ones in src.                                              // 76\n * @param {Object} dest                                                                                               // 77\n * @param {Object} src                                                                                                // 78\n * @param {Boolean} [merge]                                                                                           // 79\n * @returns {Object} dest                                                                                             // 80\n */                                                                                                                   // 81\nfunction extend(dest, src, merge) {                                                                                   // 82\n    var keys = Object.keys(src);                                                                                      // 83\n    var i = 0;                                                                                                        // 84\n    while (i < keys.length) {                                                                                         // 85\n        if (!merge || (merge && dest[keys[i]] === undefined)) {                                                       // 86\n            dest[keys[i]] = src[keys[i]];                                                                             // 87\n        }                                                                                                             // 88\n        i++;                                                                                                          // 89\n    }                                                                                                                 // 90\n    return dest;                                                                                                      // 91\n}                                                                                                                     // 92\n                                                                                                                      // 93\n/**                                                                                                                   // 94\n * merge the values from src in the dest.                                                                             // 95\n * means that properties that exist in dest will not be overwritten by src                                            // 96\n * @param {Object} dest                                                                                               // 97\n * @param {Object} src                                                                                                // 98\n * @returns {Object} dest                                                                                             // 99\n */                                                                                                                   // 100\nfunction merge(dest, src) {                                                                                           // 101\n    return extend(dest, src, true);                                                                                   // 102\n}                                                                                                                     // 103\n                                                                                                                      // 104\n/**                                                                                                                   // 105\n * simple class inheritance                                                                                           // 106\n * @param {Function} child                                                                                            // 107\n * @param {Function} base                                                                                             // 108\n * @param {Object} [properties]                                                                                       // 109\n */                                                                                                                   // 110\nfunction inherit(child, base, properties) {                                                                           // 111\n    var baseP = base.prototype,                                                                                       // 112\n        childP;                                                                                                       // 113\n                                                                                                                      // 114\n    childP = child.prototype = Object.create(baseP);                                                                  // 115\n    childP.constructor = child;                                                                                       // 116\n    childP._super = baseP;                                                                                            // 117\n                                                                                                                      // 118\n    if (properties) {                                                                                                 // 119\n        extend(childP, properties);                                                                                   // 120\n    }                                                                                                                 // 121\n}                                                                                                                     // 122\n                                                                                                                      // 123\n/**                                                                                                                   // 124\n * simple function bind                                                                                               // 125\n * @param {Function} fn                                                                                               // 126\n * @param {Object} context                                                                                            // 127\n * @returns {Function}                                                                                                // 128\n */                                                                                                                   // 129\nfunction bindFn(fn, context) {                                                                                        // 130\n    return function boundFn() {                                                                                       // 131\n        return fn.apply(context, arguments);                                                                          // 132\n    };                                                                                                                // 133\n}                                                                                                                     // 134\n                                                                                                                      // 135\n/**                                                                                                                   // 136\n * let a boolean value also be a function that must return a boolean                                                  // 137\n * this first item in args will be used as the context                                                                // 138\n * @param {Boolean|Function} val                                                                                      // 139\n * @param {Array} [args]                                                                                              // 140\n * @returns {Boolean}                                                                                                 // 141\n */                                                                                                                   // 142\nfunction boolOrFn(val, args) {                                                                                        // 143\n    if (typeof val == TYPE_FUNCTION) {                                                                                // 144\n        return val.apply(args ? args[0] || undefined : undefined, args);                                              // 145\n    }                                                                                                                 // 146\n    return val;                                                                                                       // 147\n}                                                                                                                     // 148\n                                                                                                                      // 149\n/**                                                                                                                   // 150\n * use the val2 when val1 is undefined                                                                                // 151\n * @param {*} val1                                                                                                    // 152\n * @param {*} val2                                                                                                    // 153\n * @returns {*}                                                                                                       // 154\n */                                                                                                                   // 155\nfunction ifUndefined(val1, val2) {                                                                                    // 156\n    return (val1 === undefined) ? val2 : val1;                                                                        // 157\n}                                                                                                                     // 158\n                                                                                                                      // 159\n/**                                                                                                                   // 160\n * addEventListener with multiple events at once                                                                      // 161\n * @param {EventTarget} target                                                                                        // 162\n * @param {String} types                                                                                              // 163\n * @param {Function} handler                                                                                          // 164\n */                                                                                                                   // 165\nfunction addEventListeners(target, types, handler) {                                                                  // 166\n    each(splitStr(types), function(type) {                                                                            // 167\n        target.addEventListener(type, handler, false);                                                                // 168\n    });                                                                                                               // 169\n}                                                                                                                     // 170\n                                                                                                                      // 171\n/**                                                                                                                   // 172\n * removeEventListener with multiple events at once                                                                   // 173\n * @param {EventTarget} target                                                                                        // 174\n * @param {String} types                                                                                              // 175\n * @param {Function} handler                                                                                          // 176\n */                                                                                                                   // 177\nfunction removeEventListeners(target, types, handler) {                                                               // 178\n    each(splitStr(types), function(type) {                                                                            // 179\n        target.removeEventListener(type, handler, false);                                                             // 180\n    });                                                                                                               // 181\n}                                                                                                                     // 182\n                                                                                                                      // 183\n/**                                                                                                                   // 184\n * find if a node is in the given parent                                                                              // 185\n * @method hasParent                                                                                                  // 186\n * @param {HTMLElement} node                                                                                          // 187\n * @param {HTMLElement} parent                                                                                        // 188\n * @return {Boolean} found                                                                                            // 189\n */                                                                                                                   // 190\nfunction hasParent(node, parent) {                                                                                    // 191\n    while (node) {                                                                                                    // 192\n        if (node == parent) {                                                                                         // 193\n            return true;                                                                                              // 194\n        }                                                                                                             // 195\n        node = node.parentNode;                                                                                       // 196\n    }                                                                                                                 // 197\n    return false;                                                                                                     // 198\n}                                                                                                                     // 199\n                                                                                                                      // 200\n/**                                                                                                                   // 201\n * small indexOf wrapper                                                                                              // 202\n * @param {String} str                                                                                                // 203\n * @param {String} find                                                                                               // 204\n * @returns {Boolean} found                                                                                           // 205\n */                                                                                                                   // 206\nfunction inStr(str, find) {                                                                                           // 207\n    return str.indexOf(find) > -1;                                                                                    // 208\n}                                                                                                                     // 209\n                                                                                                                      // 210\n/**                                                                                                                   // 211\n * split string on whitespace                                                                                         // 212\n * @param {String} str                                                                                                // 213\n * @returns {Array} words                                                                                             // 214\n */                                                                                                                   // 215\nfunction splitStr(str) {                                                                                              // 216\n    return str.trim().split(/\\s+/g);                                                                                  // 217\n}                                                                                                                     // 218\n                                                                                                                      // 219\n/**                                                                                                                   // 220\n * find if a array contains the object using indexOf or a simple polyFill                                             // 221\n * @param {Array} src                                                                                                 // 222\n * @param {String} find                                                                                               // 223\n * @param {String} [findByKey]                                                                                        // 224\n * @return {Boolean|Number} false when not found, or the index                                                        // 225\n */                                                                                                                   // 226\nfunction inArray(src, find, findByKey) {                                                                              // 227\n    if (src.indexOf && !findByKey) {                                                                                  // 228\n        return src.indexOf(find);                                                                                     // 229\n    } else {                                                                                                          // 230\n        var i = 0;                                                                                                    // 231\n        while (i < src.length) {                                                                                      // 232\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {                        // 233\n                return i;                                                                                             // 234\n            }                                                                                                         // 235\n            i++;                                                                                                      // 236\n        }                                                                                                             // 237\n        return -1;                                                                                                    // 238\n    }                                                                                                                 // 239\n}                                                                                                                     // 240\n                                                                                                                      // 241\n/**                                                                                                                   // 242\n * convert array-like objects to real arrays                                                                          // 243\n * @param {Object} obj                                                                                                // 244\n * @returns {Array}                                                                                                   // 245\n */                                                                                                                   // 246\nfunction toArray(obj) {                                                                                               // 247\n    return Array.prototype.slice.call(obj, 0);                                                                        // 248\n}                                                                                                                     // 249\n                                                                                                                      // 250\n/**                                                                                                                   // 251\n * unique array with objects based on a key (like 'id') or just by the array's value                                  // 252\n * @param {Array} src [{id:1},{id:2},{id:1}]                                                                          // 253\n * @param {String} [key]                                                                                              // 254\n * @param {Boolean} [sort=False]                                                                                      // 255\n * @returns {Array} [{id:1},{id:2}]                                                                                   // 256\n */                                                                                                                   // 257\nfunction uniqueArray(src, key, sort) {                                                                                // 258\n    var results = [];                                                                                                 // 259\n    var values = [];                                                                                                  // 260\n    var i = 0;                                                                                                        // 261\n                                                                                                                      // 262\n    while (i < src.length) {                                                                                          // 263\n        var val = key ? src[i][key] : src[i];                                                                         // 264\n        if (inArray(values, val) < 0) {                                                                               // 265\n            results.push(src[i]);                                                                                     // 266\n        }                                                                                                             // 267\n        values[i] = val;                                                                                              // 268\n        i++;                                                                                                          // 269\n    }                                                                                                                 // 270\n                                                                                                                      // 271\n    if (sort) {                                                                                                       // 272\n        if (!key) {                                                                                                   // 273\n            results = results.sort();                                                                                 // 274\n        } else {                                                                                                      // 275\n            results = results.sort(function sortUniqueArray(a, b) {                                                   // 276\n                return a[key] > b[key];                                                                               // 277\n            });                                                                                                       // 278\n        }                                                                                                             // 279\n    }                                                                                                                 // 280\n                                                                                                                      // 281\n    return results;                                                                                                   // 282\n}                                                                                                                     // 283\n                                                                                                                      // 284\n/**                                                                                                                   // 285\n * get the prefixed property                                                                                          // 286\n * @param {Object} obj                                                                                                // 287\n * @param {String} property                                                                                           // 288\n * @returns {String|Undefined} prefixed                                                                               // 289\n */                                                                                                                   // 290\nfunction prefixed(obj, property) {                                                                                    // 291\n    var prefix, prop;                                                                                                 // 292\n    var camelProp = property[0].toUpperCase() + property.slice(1);                                                    // 293\n                                                                                                                      // 294\n    var i = 0;                                                                                                        // 295\n    while (i < VENDOR_PREFIXES.length) {                                                                              // 296\n        prefix = VENDOR_PREFIXES[i];                                                                                  // 297\n        prop = (prefix) ? prefix + camelProp : property;                                                              // 298\n                                                                                                                      // 299\n        if (prop in obj) {                                                                                            // 300\n            return prop;                                                                                              // 301\n        }                                                                                                             // 302\n        i++;                                                                                                          // 303\n    }                                                                                                                 // 304\n    return undefined;                                                                                                 // 305\n}                                                                                                                     // 306\n                                                                                                                      // 307\n/**                                                                                                                   // 308\n * get a unique id                                                                                                    // 309\n * @returns {number} uniqueId                                                                                         // 310\n */                                                                                                                   // 311\nvar _uniqueId = 1;                                                                                                    // 312\nfunction uniqueId() {                                                                                                 // 313\n    return _uniqueId++;                                                                                               // 314\n}                                                                                                                     // 315\n                                                                                                                      // 316\n/**                                                                                                                   // 317\n * get the window object of an element                                                                                // 318\n * @param {HTMLElement} element                                                                                       // 319\n * @returns {DocumentView|Window}                                                                                     // 320\n */                                                                                                                   // 321\nfunction getWindowForElement(element) {                                                                               // 322\n    var doc = element.ownerDocument;                                                                                  // 323\n    return (doc.defaultView || doc.parentWindow);                                                                     // 324\n}                                                                                                                     // 325\n                                                                                                                      // 326\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;                                                           // 327\n                                                                                                                      // 328\nvar SUPPORT_TOUCH = ('ontouchstart' in window);                                                                       // 329\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;                                          // 330\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);                                     // 331\n                                                                                                                      // 332\nvar INPUT_TYPE_TOUCH = 'touch';                                                                                       // 333\nvar INPUT_TYPE_PEN = 'pen';                                                                                           // 334\nvar INPUT_TYPE_MOUSE = 'mouse';                                                                                       // 335\nvar INPUT_TYPE_KINECT = 'kinect';                                                                                     // 336\n                                                                                                                      // 337\nvar COMPUTE_INTERVAL = 25;                                                                                            // 338\n                                                                                                                      // 339\nvar INPUT_START = 1;                                                                                                  // 340\nvar INPUT_MOVE = 2;                                                                                                   // 341\nvar INPUT_END = 4;                                                                                                    // 342\nvar INPUT_CANCEL = 8;                                                                                                 // 343\n                                                                                                                      // 344\nvar DIRECTION_NONE = 1;                                                                                               // 345\nvar DIRECTION_LEFT = 2;                                                                                               // 346\nvar DIRECTION_RIGHT = 4;                                                                                              // 347\nvar DIRECTION_UP = 8;                                                                                                 // 348\nvar DIRECTION_DOWN = 16;                                                                                              // 349\n                                                                                                                      // 350\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;                                                          // 351\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;                                                               // 352\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;                                                        // 353\n                                                                                                                      // 354\nvar PROPS_XY = ['x', 'y'];                                                                                            // 355\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];                                                                         // 356\n                                                                                                                      // 357\n/**                                                                                                                   // 358\n * create new input type manager                                                                                      // 359\n * @param {Manager} manager                                                                                           // 360\n * @param {Function} callback                                                                                         // 361\n * @returns {Input}                                                                                                   // 362\n * @constructor                                                                                                       // 363\n */                                                                                                                   // 364\nfunction Input(manager, callback) {                                                                                   // 365\n    var self = this;                                                                                                  // 366\n    this.manager = manager;                                                                                           // 367\n    this.callback = callback;                                                                                         // 368\n    this.element = manager.element;                                                                                   // 369\n    this.target = manager.options.inputTarget;                                                                        // 370\n                                                                                                                      // 371\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,                        // 372\n    // so when disabled the input events are completely bypassed.                                                     // 373\n    this.domHandler = function(ev) {                                                                                  // 374\n        if (boolOrFn(manager.options.enable, [manager])) {                                                            // 375\n            self.handler(ev);                                                                                         // 376\n        }                                                                                                             // 377\n    };                                                                                                                // 378\n                                                                                                                      // 379\n    this.init();                                                                                                      // 380\n                                                                                                                      // 381\n}                                                                                                                     // 382\n                                                                                                                      // 383\nInput.prototype = {                                                                                                   // 384\n    /**                                                                                                               // 385\n     * should handle the inputEvent data and trigger the callback                                                     // 386\n     * @virtual                                                                                                       // 387\n     */                                                                                                               // 388\n    handler: function() { },                                                                                          // 389\n                                                                                                                      // 390\n    /**                                                                                                               // 391\n     * bind the events                                                                                                // 392\n     */                                                                                                               // 393\n    init: function() {                                                                                                // 394\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);                                     // 395\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);                              // 396\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);              // 397\n    },                                                                                                                // 398\n                                                                                                                      // 399\n    /**                                                                                                               // 400\n     * unbind the events                                                                                              // 401\n     */                                                                                                               // 402\n    destroy: function() {                                                                                             // 403\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);                                  // 404\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);                           // 405\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);           // 406\n    }                                                                                                                 // 407\n};                                                                                                                    // 408\n                                                                                                                      // 409\n/**                                                                                                                   // 410\n * create new input type manager                                                                                      // 411\n * called by the Manager constructor                                                                                  // 412\n * @param {Hammer} manager                                                                                            // 413\n * @returns {Input}                                                                                                   // 414\n */                                                                                                                   // 415\nfunction createInputInstance(manager) {                                                                               // 416\n    var Type;                                                                                                         // 417\n    var inputClass = manager.options.inputClass;                                                                      // 418\n                                                                                                                      // 419\n    if (inputClass) {                                                                                                 // 420\n        Type = inputClass;                                                                                            // 421\n    } else if (SUPPORT_POINTER_EVENTS) {                                                                              // 422\n        Type = PointerEventInput;                                                                                     // 423\n    } else if (SUPPORT_ONLY_TOUCH) {                                                                                  // 424\n        Type = TouchInput;                                                                                            // 425\n    } else if (!SUPPORT_TOUCH) {                                                                                      // 426\n        Type = MouseInput;                                                                                            // 427\n    } else {                                                                                                          // 428\n        Type = TouchMouseInput;                                                                                       // 429\n    }                                                                                                                 // 430\n    return new (Type)(manager, inputHandler);                                                                         // 431\n}                                                                                                                     // 432\n                                                                                                                      // 433\n/**                                                                                                                   // 434\n * handle input events                                                                                                // 435\n * @param {Manager} manager                                                                                           // 436\n * @param {String} eventType                                                                                          // 437\n * @param {Object} input                                                                                              // 438\n */                                                                                                                   // 439\nfunction inputHandler(manager, eventType, input) {                                                                    // 440\n    var pointersLen = input.pointers.length;                                                                          // 441\n    var changedPointersLen = input.changedPointers.length;                                                            // 442\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));                              // 443\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));               // 444\n                                                                                                                      // 445\n    input.isFirst = !!isFirst;                                                                                        // 446\n    input.isFinal = !!isFinal;                                                                                        // 447\n                                                                                                                      // 448\n    if (isFirst) {                                                                                                    // 449\n        manager.session = {};                                                                                         // 450\n    }                                                                                                                 // 451\n                                                                                                                      // 452\n    // source event is the normalized value of the domEvents                                                          // 453\n    // like 'touchstart, mouseup, pointerdown'                                                                        // 454\n    input.eventType = eventType;                                                                                      // 455\n                                                                                                                      // 456\n    // compute scale, rotation etc                                                                                    // 457\n    computeInputData(manager, input);                                                                                 // 458\n                                                                                                                      // 459\n    // emit secret event                                                                                              // 460\n    manager.emit('hammer.input', input);                                                                              // 461\n                                                                                                                      // 462\n    manager.recognize(input);                                                                                         // 463\n    manager.session.prevInput = input;                                                                                // 464\n}                                                                                                                     // 465\n                                                                                                                      // 466\n/**                                                                                                                   // 467\n * extend the data with some usable properties like scale, rotate, velocity etc                                       // 468\n * @param {Object} manager                                                                                            // 469\n * @param {Object} input                                                                                              // 470\n */                                                                                                                   // 471\nfunction computeInputData(manager, input) {                                                                           // 472\n    var session = manager.session;                                                                                    // 473\n    var pointers = input.pointers;                                                                                    // 474\n    var pointersLength = pointers.length;                                                                             // 475\n                                                                                                                      // 476\n    // store the first input to calculate the distance and direction                                                  // 477\n    if (!session.firstInput) {                                                                                        // 478\n        session.firstInput = simpleCloneInputData(input);                                                             // 479\n    }                                                                                                                 // 480\n                                                                                                                      // 481\n    // to compute scale and rotation we need to store the multiple touches                                            // 482\n    if (pointersLength > 1 && !session.firstMultiple) {                                                               // 483\n        session.firstMultiple = simpleCloneInputData(input);                                                          // 484\n    } else if (pointersLength === 1) {                                                                                // 485\n        session.firstMultiple = false;                                                                                // 486\n    }                                                                                                                 // 487\n                                                                                                                      // 488\n    var firstInput = session.firstInput;                                                                              // 489\n    var firstMultiple = session.firstMultiple;                                                                        // 490\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;                                      // 491\n                                                                                                                      // 492\n    var center = input.center = getCenter(pointers);                                                                  // 493\n    input.timeStamp = now();                                                                                          // 494\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;                                                         // 495\n                                                                                                                      // 496\n    input.angle = getAngle(offsetCenter, center);                                                                     // 497\n    input.distance = getDistance(offsetCenter, center);                                                               // 498\n                                                                                                                      // 499\n    computeDeltaXY(session, input);                                                                                   // 500\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);                                                 // 501\n                                                                                                                      // 502\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;                                     // 503\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;                               // 504\n                                                                                                                      // 505\n    computeIntervalInputData(session, input);                                                                         // 506\n                                                                                                                      // 507\n    // find the correct target                                                                                        // 508\n    var target = manager.element;                                                                                     // 509\n    if (hasParent(input.srcEvent.target, target)) {                                                                   // 510\n        target = input.srcEvent.target;                                                                               // 511\n    }                                                                                                                 // 512\n    input.target = target;                                                                                            // 513\n}                                                                                                                     // 514\n                                                                                                                      // 515\nfunction computeDeltaXY(session, input) {                                                                             // 516\n    var center = input.center;                                                                                        // 517\n    var offset = session.offsetDelta || {};                                                                           // 518\n    var prevDelta = session.prevDelta || {};                                                                          // 519\n    var prevInput = session.prevInput || {};                                                                          // 520\n                                                                                                                      // 521\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {                                       // 522\n        prevDelta = session.prevDelta = {                                                                             // 523\n            x: prevInput.deltaX || 0,                                                                                 // 524\n            y: prevInput.deltaY || 0                                                                                  // 525\n        };                                                                                                            // 526\n                                                                                                                      // 527\n        offset = session.offsetDelta = {                                                                              // 528\n            x: center.x,                                                                                              // 529\n            y: center.y                                                                                               // 530\n        };                                                                                                            // 531\n    }                                                                                                                 // 532\n                                                                                                                      // 533\n    input.deltaX = prevDelta.x + (center.x - offset.x);                                                               // 534\n    input.deltaY = prevDelta.y + (center.y - offset.y);                                                               // 535\n}                                                                                                                     // 536\n                                                                                                                      // 537\n/**                                                                                                                   // 538\n * velocity is calculated every x ms                                                                                  // 539\n * @param {Object} session                                                                                            // 540\n * @param {Object} input                                                                                              // 541\n */                                                                                                                   // 542\nfunction computeIntervalInputData(session, input) {                                                                   // 543\n    var last = session.lastInterval || input,                                                                         // 544\n        deltaTime = input.timeStamp - last.timeStamp,                                                                 // 545\n        velocity, velocityX, velocityY, direction;                                                                    // 546\n                                                                                                                      // 547\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {           // 548\n        var deltaX = last.deltaX - input.deltaX;                                                                      // 549\n        var deltaY = last.deltaY - input.deltaY;                                                                      // 550\n                                                                                                                      // 551\n        var v = getVelocity(deltaTime, deltaX, deltaY);                                                               // 552\n        velocityX = v.x;                                                                                              // 553\n        velocityY = v.y;                                                                                              // 554\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;                                                                 // 555\n        direction = getDirection(deltaX, deltaY);                                                                     // 556\n                                                                                                                      // 557\n        session.lastInterval = input;                                                                                 // 558\n    } else {                                                                                                          // 559\n        // use latest velocity info if it doesn't overtake a minimum period                                           // 560\n        velocity = last.velocity;                                                                                     // 561\n        velocityX = last.velocityX;                                                                                   // 562\n        velocityY = last.velocityY;                                                                                   // 563\n        direction = last.direction;                                                                                   // 564\n    }                                                                                                                 // 565\n                                                                                                                      // 566\n    input.velocity = velocity;                                                                                        // 567\n    input.velocityX = velocityX;                                                                                      // 568\n    input.velocityY = velocityY;                                                                                      // 569\n    input.direction = direction;                                                                                      // 570\n}                                                                                                                     // 571\n                                                                                                                      // 572\n/**                                                                                                                   // 573\n * create a simple clone from the input used for storage of firstInput and firstMultiple                              // 574\n * @param {Object} input                                                                                              // 575\n * @returns {Object} clonedInputData                                                                                  // 576\n */                                                                                                                   // 577\nfunction simpleCloneInputData(input) {                                                                                // 578\n    // make a simple copy of the pointers because we will get a reference if we don't                                 // 579\n    // we only need clientXY for the calculations                                                                     // 580\n    var pointers = [];                                                                                                // 581\n    var i = 0;                                                                                                        // 582\n    while (i < input.pointers.length) {                                                                               // 583\n        pointers[i] = {                                                                                               // 584\n            clientX: round(input.pointers[i].clientX),                                                                // 585\n            clientY: round(input.pointers[i].clientY)                                                                 // 586\n        };                                                                                                            // 587\n        i++;                                                                                                          // 588\n    }                                                                                                                 // 589\n                                                                                                                      // 590\n    return {                                                                                                          // 591\n        timeStamp: now(),                                                                                             // 592\n        pointers: pointers,                                                                                           // 593\n        center: getCenter(pointers),                                                                                  // 594\n        deltaX: input.deltaX,                                                                                         // 595\n        deltaY: input.deltaY                                                                                          // 596\n    };                                                                                                                // 597\n}                                                                                                                     // 598\n                                                                                                                      // 599\n/**                                                                                                                   // 600\n * get the center of all the pointers                                                                                 // 601\n * @param {Array} pointers                                                                                            // 602\n * @return {Object} center contains `x` and `y` properties                                                            // 603\n */                                                                                                                   // 604\nfunction getCenter(pointers) {                                                                                        // 605\n    var pointersLength = pointers.length;                                                                             // 606\n                                                                                                                      // 607\n    // no need to loop when only one touch                                                                            // 608\n    if (pointersLength === 1) {                                                                                       // 609\n        return {                                                                                                      // 610\n            x: round(pointers[0].clientX),                                                                            // 611\n            y: round(pointers[0].clientY)                                                                             // 612\n        };                                                                                                            // 613\n    }                                                                                                                 // 614\n                                                                                                                      // 615\n    var x = 0, y = 0, i = 0;                                                                                          // 616\n    while (i < pointersLength) {                                                                                      // 617\n        x += pointers[i].clientX;                                                                                     // 618\n        y += pointers[i].clientY;                                                                                     // 619\n        i++;                                                                                                          // 620\n    }                                                                                                                 // 621\n                                                                                                                      // 622\n    return {                                                                                                          // 623\n        x: round(x / pointersLength),                                                                                 // 624\n        y: round(y / pointersLength)                                                                                  // 625\n    };                                                                                                                // 626\n}                                                                                                                     // 627\n                                                                                                                      // 628\n/**                                                                                                                   // 629\n * calculate the velocity between two points. unit is in px per ms.                                                   // 630\n * @param {Number} deltaTime                                                                                          // 631\n * @param {Number} x                                                                                                  // 632\n * @param {Number} y                                                                                                  // 633\n * @return {Object} velocity `x` and `y`                                                                              // 634\n */                                                                                                                   // 635\nfunction getVelocity(deltaTime, x, y) {                                                                               // 636\n    return {                                                                                                          // 637\n        x: x / deltaTime || 0,                                                                                        // 638\n        y: y / deltaTime || 0                                                                                         // 639\n    };                                                                                                                // 640\n}                                                                                                                     // 641\n                                                                                                                      // 642\n/**                                                                                                                   // 643\n * get the direction between two points                                                                               // 644\n * @param {Number} x                                                                                                  // 645\n * @param {Number} y                                                                                                  // 646\n * @return {Number} direction                                                                                         // 647\n */                                                                                                                   // 648\nfunction getDirection(x, y) {                                                                                         // 649\n    if (x === y) {                                                                                                    // 650\n        return DIRECTION_NONE;                                                                                        // 651\n    }                                                                                                                 // 652\n                                                                                                                      // 653\n    if (abs(x) >= abs(y)) {                                                                                           // 654\n        return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;                                                              // 655\n    }                                                                                                                 // 656\n    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;                                                                     // 657\n}                                                                                                                     // 658\n                                                                                                                      // 659\n/**                                                                                                                   // 660\n * calculate the absolute distance between two points                                                                 // 661\n * @param {Object} p1 {x, y}                                                                                          // 662\n * @param {Object} p2 {x, y}                                                                                          // 663\n * @param {Array} [props] containing x and y keys                                                                     // 664\n * @return {Number} distance                                                                                          // 665\n */                                                                                                                   // 666\nfunction getDistance(p1, p2, props) {                                                                                 // 667\n    if (!props) {                                                                                                     // 668\n        props = PROPS_XY;                                                                                             // 669\n    }                                                                                                                 // 670\n    var x = p2[props[0]] - p1[props[0]],                                                                              // 671\n        y = p2[props[1]] - p1[props[1]];                                                                              // 672\n                                                                                                                      // 673\n    return Math.sqrt((x * x) + (y * y));                                                                              // 674\n}                                                                                                                     // 675\n                                                                                                                      // 676\n/**                                                                                                                   // 677\n * calculate the angle between two coordinates                                                                        // 678\n * @param {Object} p1                                                                                                 // 679\n * @param {Object} p2                                                                                                 // 680\n * @param {Array} [props] containing x and y keys                                                                     // 681\n * @return {Number} angle                                                                                             // 682\n */                                                                                                                   // 683\nfunction getAngle(p1, p2, props) {                                                                                    // 684\n    if (!props) {                                                                                                     // 685\n        props = PROPS_XY;                                                                                             // 686\n    }                                                                                                                 // 687\n    var x = p2[props[0]] - p1[props[0]],                                                                              // 688\n        y = p2[props[1]] - p1[props[1]];                                                                              // 689\n    return Math.atan2(y, x) * 180 / Math.PI;                                                                          // 690\n}                                                                                                                     // 691\n                                                                                                                      // 692\n/**                                                                                                                   // 693\n * calculate the rotation degrees between two pointersets                                                             // 694\n * @param {Array} start array of pointers                                                                             // 695\n * @param {Array} end array of pointers                                                                               // 696\n * @return {Number} rotation                                                                                          // 697\n */                                                                                                                   // 698\nfunction getRotation(start, end) {                                                                                    // 699\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);                 // 700\n}                                                                                                                     // 701\n                                                                                                                      // 702\n/**                                                                                                                   // 703\n * calculate the scale factor between two pointersets                                                                 // 704\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out                               // 705\n * @param {Array} start array of pointers                                                                             // 706\n * @param {Array} end array of pointers                                                                               // 707\n * @return {Number} scale                                                                                             // 708\n */                                                                                                                   // 709\nfunction getScale(start, end) {                                                                                       // 710\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);           // 711\n}                                                                                                                     // 712\n                                                                                                                      // 713\nvar MOUSE_INPUT_MAP = {                                                                                               // 714\n    mousedown: INPUT_START,                                                                                           // 715\n    mousemove: INPUT_MOVE,                                                                                            // 716\n    mouseup: INPUT_END                                                                                                // 717\n};                                                                                                                    // 718\n                                                                                                                      // 719\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';                                                                               // 720\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';                                                                        // 721\n                                                                                                                      // 722\n/**                                                                                                                   // 723\n * Mouse events input                                                                                                 // 724\n * @constructor                                                                                                       // 725\n * @extends Input                                                                                                     // 726\n */                                                                                                                   // 727\nfunction MouseInput() {                                                                                               // 728\n    this.evEl = MOUSE_ELEMENT_EVENTS;                                                                                 // 729\n    this.evWin = MOUSE_WINDOW_EVENTS;                                                                                 // 730\n                                                                                                                      // 731\n    this.allow = true; // used by Input.TouchMouse to disable mouse events                                            // 732\n    this.pressed = false; // mousedown state                                                                          // 733\n                                                                                                                      // 734\n    Input.apply(this, arguments);                                                                                     // 735\n}                                                                                                                     // 736\n                                                                                                                      // 737\ninherit(MouseInput, Input, {                                                                                          // 738\n    /**                                                                                                               // 739\n     * handle mouse events                                                                                            // 740\n     * @param {Object} ev                                                                                             // 741\n     */                                                                                                               // 742\n    handler: function MEhandler(ev) {                                                                                 // 743\n        var eventType = MOUSE_INPUT_MAP[ev.type];                                                                     // 744\n                                                                                                                      // 745\n        // on start we want to have the left mouse button down                                                        // 746\n        if (eventType & INPUT_START && ev.button === 0) {                                                             // 747\n            this.pressed = true;                                                                                      // 748\n        }                                                                                                             // 749\n                                                                                                                      // 750\n        if (eventType & INPUT_MOVE && ev.which !== 1) {                                                               // 751\n            eventType = INPUT_END;                                                                                    // 752\n        }                                                                                                             // 753\n                                                                                                                      // 754\n        // mouse must be down, and mouse events are allowed (see the TouchMouse input)                                // 755\n        if (!this.pressed || !this.allow) {                                                                           // 756\n            return;                                                                                                   // 757\n        }                                                                                                             // 758\n                                                                                                                      // 759\n        if (eventType & INPUT_END) {                                                                                  // 760\n            this.pressed = false;                                                                                     // 761\n        }                                                                                                             // 762\n                                                                                                                      // 763\n        this.callback(this.manager, eventType, {                                                                      // 764\n            pointers: [ev],                                                                                           // 765\n            changedPointers: [ev],                                                                                    // 766\n            pointerType: INPUT_TYPE_MOUSE,                                                                            // 767\n            srcEvent: ev                                                                                              // 768\n        });                                                                                                           // 769\n    }                                                                                                                 // 770\n});                                                                                                                   // 771\n                                                                                                                      // 772\nvar POINTER_INPUT_MAP = {                                                                                             // 773\n    pointerdown: INPUT_START,                                                                                         // 774\n    pointermove: INPUT_MOVE,                                                                                          // 775\n    pointerup: INPUT_END,                                                                                             // 776\n    pointercancel: INPUT_CANCEL,                                                                                      // 777\n    pointerout: INPUT_CANCEL                                                                                          // 778\n};                                                                                                                    // 779\n                                                                                                                      // 780\n// in IE10 the pointer types is defined as an enum                                                                    // 781\nvar IE10_POINTER_TYPE_ENUM = {                                                                                        // 782\n    2: INPUT_TYPE_TOUCH,                                                                                              // 783\n    3: INPUT_TYPE_PEN,                                                                                                // 784\n    4: INPUT_TYPE_MOUSE,                                                                                              // 785\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816                              // 786\n};                                                                                                                    // 787\n                                                                                                                      // 788\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';                                                                           // 789\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';                                                    // 790\n                                                                                                                      // 791\n// IE10 has prefixed support, and case-sensitive                                                                      // 792\nif (window.MSPointerEvent) {                                                                                          // 793\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';                                                                         // 794\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';                                              // 795\n}                                                                                                                     // 796\n                                                                                                                      // 797\n/**                                                                                                                   // 798\n * Pointer events input                                                                                               // 799\n * @constructor                                                                                                       // 800\n * @extends Input                                                                                                     // 801\n */                                                                                                                   // 802\nfunction PointerEventInput() {                                                                                        // 803\n    this.evEl = POINTER_ELEMENT_EVENTS;                                                                               // 804\n    this.evWin = POINTER_WINDOW_EVENTS;                                                                               // 805\n                                                                                                                      // 806\n    Input.apply(this, arguments);                                                                                     // 807\n                                                                                                                      // 808\n    this.store = (this.manager.session.pointerEvents = []);                                                           // 809\n}                                                                                                                     // 810\n                                                                                                                      // 811\ninherit(PointerEventInput, Input, {                                                                                   // 812\n    /**                                                                                                               // 813\n     * handle mouse events                                                                                            // 814\n     * @param {Object} ev                                                                                             // 815\n     */                                                                                                               // 816\n    handler: function PEhandler(ev) {                                                                                 // 817\n        var store = this.store;                                                                                       // 818\n        var removePointer = false;                                                                                    // 819\n                                                                                                                      // 820\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');                                            // 821\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];                                                       // 822\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;                                   // 823\n                                                                                                                      // 824\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);                                                              // 825\n                                                                                                                      // 826\n        // get index of the event in the store                                                                        // 827\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');                                                   // 828\n                                                                                                                      // 829\n        // start and mouse must be down                                                                               // 830\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {                                                // 831\n            if (storeIndex < 0) {                                                                                     // 832\n                store.push(ev);                                                                                       // 833\n                storeIndex = store.length - 1;                                                                        // 834\n            }                                                                                                         // 835\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {                                                          // 836\n            removePointer = true;                                                                                     // 837\n        }                                                                                                             // 838\n                                                                                                                      // 839\n        // it not found, so the pointer hasn't been down (so it's probably a hover)                                   // 840\n        if (storeIndex < 0) {                                                                                         // 841\n            return;                                                                                                   // 842\n        }                                                                                                             // 843\n                                                                                                                      // 844\n        // update the event in the store                                                                              // 845\n        store[storeIndex] = ev;                                                                                       // 846\n                                                                                                                      // 847\n        this.callback(this.manager, eventType, {                                                                      // 848\n            pointers: store,                                                                                          // 849\n            changedPointers: [ev],                                                                                    // 850\n            pointerType: pointerType,                                                                                 // 851\n            srcEvent: ev                                                                                              // 852\n        });                                                                                                           // 853\n                                                                                                                      // 854\n        if (removePointer) {                                                                                          // 855\n            // remove from the store                                                                                  // 856\n            store.splice(storeIndex, 1);                                                                              // 857\n        }                                                                                                             // 858\n    }                                                                                                                 // 859\n});                                                                                                                   // 860\n                                                                                                                      // 861\nvar SINGLE_TOUCH_INPUT_MAP = {                                                                                        // 862\n    touchstart: INPUT_START,                                                                                          // 863\n    touchmove: INPUT_MOVE,                                                                                            // 864\n    touchend: INPUT_END,                                                                                              // 865\n    touchcancel: INPUT_CANCEL                                                                                         // 866\n};                                                                                                                    // 867\n                                                                                                                      // 868\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';                                                                        // 869\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';                                         // 870\n                                                                                                                      // 871\n/**                                                                                                                   // 872\n * Touch events input                                                                                                 // 873\n * @constructor                                                                                                       // 874\n * @extends Input                                                                                                     // 875\n */                                                                                                                   // 876\nfunction SingleTouchInput() {                                                                                         // 877\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;                                                                       // 878\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;                                                                          // 879\n    this.started = false;                                                                                             // 880\n                                                                                                                      // 881\n    Input.apply(this, arguments);                                                                                     // 882\n}                                                                                                                     // 883\n                                                                                                                      // 884\ninherit(SingleTouchInput, Input, {                                                                                    // 885\n    handler: function TEhandler(ev) {                                                                                 // 886\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];                                                                   // 887\n                                                                                                                      // 888\n        // should we handle the touch events?                                                                         // 889\n        if (type === INPUT_START) {                                                                                   // 890\n            this.started = true;                                                                                      // 891\n        }                                                                                                             // 892\n                                                                                                                      // 893\n        if (!this.started) {                                                                                          // 894\n            return;                                                                                                   // 895\n        }                                                                                                             // 896\n                                                                                                                      // 897\n        var touches = normalizeSingleTouches.call(this, ev, type);                                                    // 898\n                                                                                                                      // 899\n        // when done, reset the started state                                                                         // 900\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {                       // 901\n            this.started = false;                                                                                     // 902\n        }                                                                                                             // 903\n                                                                                                                      // 904\n        this.callback(this.manager, type, {                                                                           // 905\n            pointers: touches[0],                                                                                     // 906\n            changedPointers: touches[1],                                                                              // 907\n            pointerType: INPUT_TYPE_TOUCH,                                                                            // 908\n            srcEvent: ev                                                                                              // 909\n        });                                                                                                           // 910\n    }                                                                                                                 // 911\n});                                                                                                                   // 912\n                                                                                                                      // 913\n/**                                                                                                                   // 914\n * @this {TouchInput}                                                                                                 // 915\n * @param {Object} ev                                                                                                 // 916\n * @param {Number} type flag                                                                                          // 917\n * @returns {undefined|Array} [all, changed]                                                                          // 918\n */                                                                                                                   // 919\nfunction normalizeSingleTouches(ev, type) {                                                                           // 920\n    var all = toArray(ev.touches);                                                                                    // 921\n    var changed = toArray(ev.changedTouches);                                                                         // 922\n                                                                                                                      // 923\n    if (type & (INPUT_END | INPUT_CANCEL)) {                                                                          // 924\n        all = uniqueArray(all.concat(changed), 'identifier', true);                                                   // 925\n    }                                                                                                                 // 926\n                                                                                                                      // 927\n    return [all, changed];                                                                                            // 928\n}                                                                                                                     // 929\n                                                                                                                      // 930\nvar TOUCH_INPUT_MAP = {                                                                                               // 931\n    touchstart: INPUT_START,                                                                                          // 932\n    touchmove: INPUT_MOVE,                                                                                            // 933\n    touchend: INPUT_END,                                                                                              // 934\n    touchcancel: INPUT_CANCEL                                                                                         // 935\n};                                                                                                                    // 936\n                                                                                                                      // 937\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';                                                // 938\n                                                                                                                      // 939\n/**                                                                                                                   // 940\n * Multi-user touch events input                                                                                      // 941\n * @constructor                                                                                                       // 942\n * @extends Input                                                                                                     // 943\n */                                                                                                                   // 944\nfunction TouchInput() {                                                                                               // 945\n    this.evTarget = TOUCH_TARGET_EVENTS;                                                                              // 946\n    this.targetIds = {};                                                                                              // 947\n                                                                                                                      // 948\n    Input.apply(this, arguments);                                                                                     // 949\n}                                                                                                                     // 950\n                                                                                                                      // 951\ninherit(TouchInput, Input, {                                                                                          // 952\n    handler: function MTEhandler(ev) {                                                                                // 953\n        var type = TOUCH_INPUT_MAP[ev.type];                                                                          // 954\n        var touches = getTouches.call(this, ev, type);                                                                // 955\n        if (!touches) {                                                                                               // 956\n            return;                                                                                                   // 957\n        }                                                                                                             // 958\n                                                                                                                      // 959\n        this.callback(this.manager, type, {                                                                           // 960\n            pointers: touches[0],                                                                                     // 961\n            changedPointers: touches[1],                                                                              // 962\n            pointerType: INPUT_TYPE_TOUCH,                                                                            // 963\n            srcEvent: ev                                                                                              // 964\n        });                                                                                                           // 965\n    }                                                                                                                 // 966\n});                                                                                                                   // 967\n                                                                                                                      // 968\n/**                                                                                                                   // 969\n * @this {TouchInput}                                                                                                 // 970\n * @param {Object} ev                                                                                                 // 971\n * @param {Number} type flag                                                                                          // 972\n * @returns {undefined|Array} [all, changed]                                                                          // 973\n */                                                                                                                   // 974\nfunction getTouches(ev, type) {                                                                                       // 975\n    var allTouches = toArray(ev.touches);                                                                             // 976\n    var targetIds = this.targetIds;                                                                                   // 977\n                                                                                                                      // 978\n    // when there is only one touch, the process can be simplified                                                    // 979\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {                                               // 980\n        targetIds[allTouches[0].identifier] = true;                                                                   // 981\n        return [allTouches, allTouches];                                                                              // 982\n    }                                                                                                                 // 983\n                                                                                                                      // 984\n    var i,                                                                                                            // 985\n        targetTouches,                                                                                                // 986\n        changedTouches = toArray(ev.changedTouches),                                                                  // 987\n        changedTargetTouches = [],                                                                                    // 988\n        target = this.target;                                                                                         // 989\n                                                                                                                      // 990\n    // get target touches from touches                                                                                // 991\n    targetTouches = allTouches.filter(function(touch) {                                                               // 992\n        return hasParent(touch.target, target);                                                                       // 993\n    });                                                                                                               // 994\n                                                                                                                      // 995\n    // collect touches                                                                                                // 996\n    if (type === INPUT_START) {                                                                                       // 997\n        i = 0;                                                                                                        // 998\n        while (i < targetTouches.length) {                                                                            // 999\n            targetIds[targetTouches[i].identifier] = true;                                                            // 1000\n            i++;                                                                                                      // 1001\n        }                                                                                                             // 1002\n    }                                                                                                                 // 1003\n                                                                                                                      // 1004\n    // filter changed touches to only contain touches that exist in the collected target ids                          // 1005\n    i = 0;                                                                                                            // 1006\n    while (i < changedTouches.length) {                                                                               // 1007\n        if (targetIds[changedTouches[i].identifier]) {                                                                // 1008\n            changedTargetTouches.push(changedTouches[i]);                                                             // 1009\n        }                                                                                                             // 1010\n                                                                                                                      // 1011\n        // cleanup removed touches                                                                                    // 1012\n        if (type & (INPUT_END | INPUT_CANCEL)) {                                                                      // 1013\n            delete targetIds[changedTouches[i].identifier];                                                           // 1014\n        }                                                                                                             // 1015\n        i++;                                                                                                          // 1016\n    }                                                                                                                 // 1017\n                                                                                                                      // 1018\n    if (!changedTargetTouches.length) {                                                                               // 1019\n        return;                                                                                                       // 1020\n    }                                                                                                                 // 1021\n                                                                                                                      // 1022\n    return [                                                                                                          // 1023\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'     // 1024\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),                                  // 1025\n        changedTargetTouches                                                                                          // 1026\n    ];                                                                                                                // 1027\n}                                                                                                                     // 1028\n                                                                                                                      // 1029\n/**                                                                                                                   // 1030\n * Combined touch and mouse input                                                                                     // 1031\n *                                                                                                                    // 1032\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.                            // 1033\n * This because touch devices also emit mouse events while doing a touch.                                             // 1034\n *                                                                                                                    // 1035\n * @constructor                                                                                                       // 1036\n * @extends Input                                                                                                     // 1037\n */                                                                                                                   // 1038\nfunction TouchMouseInput() {                                                                                          // 1039\n    Input.apply(this, arguments);                                                                                     // 1040\n                                                                                                                      // 1041\n    var handler = bindFn(this.handler, this);                                                                         // 1042\n    this.touch = new TouchInput(this.manager, handler);                                                               // 1043\n    this.mouse = new MouseInput(this.manager, handler);                                                               // 1044\n}                                                                                                                     // 1045\n                                                                                                                      // 1046\ninherit(TouchMouseInput, Input, {                                                                                     // 1047\n    /**                                                                                                               // 1048\n     * handle mouse and touch events                                                                                  // 1049\n     * @param {Hammer} manager                                                                                        // 1050\n     * @param {String} inputEvent                                                                                     // 1051\n     * @param {Object} inputData                                                                                      // 1052\n     */                                                                                                               // 1053\n    handler: function TMEhandler(manager, inputEvent, inputData) {                                                    // 1054\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),                                                    // 1055\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);                                                    // 1056\n                                                                                                                      // 1057\n        // when we're in a touch event, so  block all upcoming mouse events                                           // 1058\n        // most mobile browser also emit mouseevents, right after touchstart                                          // 1059\n        if (isTouch) {                                                                                                // 1060\n            this.mouse.allow = false;                                                                                 // 1061\n        } else if (isMouse && !this.mouse.allow) {                                                                    // 1062\n            return;                                                                                                   // 1063\n        }                                                                                                             // 1064\n                                                                                                                      // 1065\n        // reset the allowMouse when we're done                                                                       // 1066\n        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {                                                                // 1067\n            this.mouse.allow = true;                                                                                  // 1068\n        }                                                                                                             // 1069\n                                                                                                                      // 1070\n        this.callback(manager, inputEvent, inputData);                                                                // 1071\n    },                                                                                                                // 1072\n                                                                                                                      // 1073\n    /**                                                                                                               // 1074\n     * remove the event listeners                                                                                     // 1075\n     */                                                                                                               // 1076\n    destroy: function destroy() {                                                                                     // 1077\n        this.touch.destroy();                                                                                         // 1078\n        this.mouse.destroy();                                                                                         // 1079\n    }                                                                                                                 // 1080\n});                                                                                                                   // 1081\n                                                                                                                      // 1082\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');                                              // 1083\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;                                                        // 1084\n                                                                                                                      // 1085\n// magical touchAction value                                                                                          // 1086\nvar TOUCH_ACTION_COMPUTE = 'compute';                                                                                 // 1087\nvar TOUCH_ACTION_AUTO = 'auto';                                                                                       // 1088\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented                                                    // 1089\nvar TOUCH_ACTION_NONE = 'none';                                                                                       // 1090\nvar TOUCH_ACTION_PAN_X = 'pan-x';                                                                                     // 1091\nvar TOUCH_ACTION_PAN_Y = 'pan-y';                                                                                     // 1092\n                                                                                                                      // 1093\n/**                                                                                                                   // 1094\n * Touch Action                                                                                                       // 1095\n * sets the touchAction property or uses the js alternative                                                           // 1096\n * @param {Manager} manager                                                                                           // 1097\n * @param {String} value                                                                                              // 1098\n * @constructor                                                                                                       // 1099\n */                                                                                                                   // 1100\nfunction TouchAction(manager, value) {                                                                                // 1101\n    this.manager = manager;                                                                                           // 1102\n    this.set(value);                                                                                                  // 1103\n}                                                                                                                     // 1104\n                                                                                                                      // 1105\nTouchAction.prototype = {                                                                                             // 1106\n    /**                                                                                                               // 1107\n     * set the touchAction value on the element or enable the polyfill                                                // 1108\n     * @param {String} value                                                                                          // 1109\n     */                                                                                                               // 1110\n    set: function(value) {                                                                                            // 1111\n        // find out the touch-action by the event handlers                                                            // 1112\n        if (value == TOUCH_ACTION_COMPUTE) {                                                                          // 1113\n            value = this.compute();                                                                                   // 1114\n        }                                                                                                             // 1115\n                                                                                                                      // 1116\n        if (NATIVE_TOUCH_ACTION) {                                                                                    // 1117\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;                                                // 1118\n        }                                                                                                             // 1119\n        this.actions = value.toLowerCase().trim();                                                                    // 1120\n    },                                                                                                                // 1121\n                                                                                                                      // 1122\n    /**                                                                                                               // 1123\n     * just re-set the touchAction value                                                                              // 1124\n     */                                                                                                               // 1125\n    update: function() {                                                                                              // 1126\n        this.set(this.manager.options.touchAction);                                                                   // 1127\n    },                                                                                                                // 1128\n                                                                                                                      // 1129\n    /**                                                                                                               // 1130\n     * compute the value for the touchAction property based on the recognizer's settings                              // 1131\n     * @returns {String} value                                                                                        // 1132\n     */                                                                                                               // 1133\n    compute: function() {                                                                                             // 1134\n        var actions = [];                                                                                             // 1135\n        each(this.manager.recognizers, function(recognizer) {                                                         // 1136\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {                                                  // 1137\n                actions = actions.concat(recognizer.getTouchAction());                                                // 1138\n            }                                                                                                         // 1139\n        });                                                                                                           // 1140\n        return cleanTouchActions(actions.join(' '));                                                                  // 1141\n    },                                                                                                                // 1142\n                                                                                                                      // 1143\n    /**                                                                                                               // 1144\n     * this method is called on each input cycle and provides the preventing of the browser behavior                  // 1145\n     * @param {Object} input                                                                                          // 1146\n     */                                                                                                               // 1147\n    preventDefaults: function(input) {                                                                                // 1148\n        // not needed with native support for the touchAction property                                                // 1149\n        if (NATIVE_TOUCH_ACTION) {                                                                                    // 1150\n            return;                                                                                                   // 1151\n        }                                                                                                             // 1152\n                                                                                                                      // 1153\n        var srcEvent = input.srcEvent;                                                                                // 1154\n        var direction = input.offsetDirection;                                                                        // 1155\n                                                                                                                      // 1156\n        // if the touch action did prevented once this session                                                        // 1157\n        if (this.manager.session.prevented) {                                                                         // 1158\n            srcEvent.preventDefault();                                                                                // 1159\n            return;                                                                                                   // 1160\n        }                                                                                                             // 1161\n                                                                                                                      // 1162\n        var actions = this.actions;                                                                                   // 1163\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE);                                                              // 1164\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);                                                             // 1165\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);                                                             // 1166\n                                                                                                                      // 1167\n        if (hasNone ||                                                                                                // 1168\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||                                                          // 1169\n            (hasPanX && direction & DIRECTION_VERTICAL)) {                                                            // 1170\n            return this.preventSrc(srcEvent);                                                                         // 1171\n        }                                                                                                             // 1172\n    },                                                                                                                // 1173\n                                                                                                                      // 1174\n    /**                                                                                                               // 1175\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)                        // 1176\n     * @param {Object} srcEvent                                                                                       // 1177\n     */                                                                                                               // 1178\n    preventSrc: function(srcEvent) {                                                                                  // 1179\n        this.manager.session.prevented = true;                                                                        // 1180\n        srcEvent.preventDefault();                                                                                    // 1181\n    }                                                                                                                 // 1182\n};                                                                                                                    // 1183\n                                                                                                                      // 1184\n/**                                                                                                                   // 1185\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *                   // 1186\n * @param {String} actions                                                                                            // 1187\n * @returns {*}                                                                                                       // 1188\n */                                                                                                                   // 1189\nfunction cleanTouchActions(actions) {                                                                                 // 1190\n    // none                                                                                                           // 1191\n    if (inStr(actions, TOUCH_ACTION_NONE)) {                                                                          // 1192\n        return TOUCH_ACTION_NONE;                                                                                     // 1193\n    }                                                                                                                 // 1194\n                                                                                                                      // 1195\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);                                                                 // 1196\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);                                                                 // 1197\n                                                                                                                      // 1198\n    // pan-x and pan-y can be combined                                                                                // 1199\n    if (hasPanX && hasPanY) {                                                                                         // 1200\n        return TOUCH_ACTION_PAN_X + ' ' + TOUCH_ACTION_PAN_Y;                                                         // 1201\n    }                                                                                                                 // 1202\n                                                                                                                      // 1203\n    // pan-x OR pan-y                                                                                                 // 1204\n    if (hasPanX || hasPanY) {                                                                                         // 1205\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;                                                     // 1206\n    }                                                                                                                 // 1207\n                                                                                                                      // 1208\n    // manipulation                                                                                                   // 1209\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {                                                                  // 1210\n        return TOUCH_ACTION_MANIPULATION;                                                                             // 1211\n    }                                                                                                                 // 1212\n                                                                                                                      // 1213\n    return TOUCH_ACTION_AUTO;                                                                                         // 1214\n}                                                                                                                     // 1215\n                                                                                                                      // 1216\n/**                                                                                                                   // 1217\n * Recognizer flow explained; *                                                                                       // 1218\n * All recognizers have the initial state of POSSIBLE when a input session starts.                                    // 1219\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *    // 1220\n * Example session for mouse-input: mousedown -> mousemove -> mouseup                                                 // 1221\n *                                                                                                                    // 1222\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed                              // 1223\n * which determines with state it should be.                                                                          // 1224\n *                                                                                                                    // 1225\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to                     // 1226\n * POSSIBLE to give it another change on the next cycle.                                                              // 1227\n *                                                                                                                    // 1228\n *               Possible                                                                                             // 1229\n *                  |                                                                                                 // 1230\n *            +-----+---------------+                                                                                 // 1231\n *            |                     |                                                                                 // 1232\n *      +-----+-----+               |                                                                                 // 1233\n *      |           |               |                                                                                 // 1234\n *   Failed      Cancelled          |                                                                                 // 1235\n *                          +-------+------+                                                                          // 1236\n *                          |              |                                                                          // 1237\n *                      Recognized       Began                                                                        // 1238\n *                                         |                                                                          // 1239\n *                                      Changed                                                                       // 1240\n *                                         |                                                                          // 1241\n *                                  Ended/Recognized                                                                  // 1242\n */                                                                                                                   // 1243\nvar STATE_POSSIBLE = 1;                                                                                               // 1244\nvar STATE_BEGAN = 2;                                                                                                  // 1245\nvar STATE_CHANGED = 4;                                                                                                // 1246\nvar STATE_ENDED = 8;                                                                                                  // 1247\nvar STATE_RECOGNIZED = STATE_ENDED;                                                                                   // 1248\nvar STATE_CANCELLED = 16;                                                                                             // 1249\nvar STATE_FAILED = 32;                                                                                                // 1250\n                                                                                                                      // 1251\n/**                                                                                                                   // 1252\n * Recognizer                                                                                                         // 1253\n * Every recognizer needs to extend from this class.                                                                  // 1254\n * @constructor                                                                                                       // 1255\n * @param {Object} options                                                                                            // 1256\n */                                                                                                                   // 1257\nfunction Recognizer(options) {                                                                                        // 1258\n    this.id = uniqueId();                                                                                             // 1259\n                                                                                                                      // 1260\n    this.manager = null;                                                                                              // 1261\n    this.options = merge(options || {}, this.defaults);                                                               // 1262\n                                                                                                                      // 1263\n    // default is enable true                                                                                         // 1264\n    this.options.enable = ifUndefined(this.options.enable, true);                                                     // 1265\n                                                                                                                      // 1266\n    this.state = STATE_POSSIBLE;                                                                                      // 1267\n                                                                                                                      // 1268\n    this.simultaneous = {};                                                                                           // 1269\n    this.requireFail = [];                                                                                            // 1270\n}                                                                                                                     // 1271\n                                                                                                                      // 1272\nRecognizer.prototype = {                                                                                              // 1273\n    /**                                                                                                               // 1274\n     * @virtual                                                                                                       // 1275\n     * @type {Object}                                                                                                 // 1276\n     */                                                                                                               // 1277\n    defaults: {},                                                                                                     // 1278\n                                                                                                                      // 1279\n    /**                                                                                                               // 1280\n     * set options                                                                                                    // 1281\n     * @param {Object} options                                                                                        // 1282\n     * @return {Recognizer}                                                                                           // 1283\n     */                                                                                                               // 1284\n    set: function(options) {                                                                                          // 1285\n        extend(this.options, options);                                                                                // 1286\n                                                                                                                      // 1287\n        // also update the touchAction, in case something changed about the directions/enabled state                  // 1288\n        this.manager && this.manager.touchAction.update();                                                            // 1289\n        return this;                                                                                                  // 1290\n    },                                                                                                                // 1291\n                                                                                                                      // 1292\n    /**                                                                                                               // 1293\n     * recognize simultaneous with an other recognizer.                                                               // 1294\n     * @param {Recognizer} otherRecognizer                                                                            // 1295\n     * @returns {Recognizer} this                                                                                     // 1296\n     */                                                                                                               // 1297\n    recognizeWith: function(otherRecognizer) {                                                                        // 1298\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {                                                 // 1299\n            return this;                                                                                              // 1300\n        }                                                                                                             // 1301\n                                                                                                                      // 1302\n        var simultaneous = this.simultaneous;                                                                         // 1303\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);                                        // 1304\n        if (!simultaneous[otherRecognizer.id]) {                                                                      // 1305\n            simultaneous[otherRecognizer.id] = otherRecognizer;                                                       // 1306\n            otherRecognizer.recognizeWith(this);                                                                      // 1307\n        }                                                                                                             // 1308\n        return this;                                                                                                  // 1309\n    },                                                                                                                // 1310\n                                                                                                                      // 1311\n    /**                                                                                                               // 1312\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.                                 // 1313\n     * @param {Recognizer} otherRecognizer                                                                            // 1314\n     * @returns {Recognizer} this                                                                                     // 1315\n     */                                                                                                               // 1316\n    dropRecognizeWith: function(otherRecognizer) {                                                                    // 1317\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {                                             // 1318\n            return this;                                                                                              // 1319\n        }                                                                                                             // 1320\n                                                                                                                      // 1321\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);                                        // 1322\n        delete this.simultaneous[otherRecognizer.id];                                                                 // 1323\n        return this;                                                                                                  // 1324\n    },                                                                                                                // 1325\n                                                                                                                      // 1326\n    /**                                                                                                               // 1327\n     * recognizer can only run when an other is failing                                                               // 1328\n     * @param {Recognizer} otherRecognizer                                                                            // 1329\n     * @returns {Recognizer} this                                                                                     // 1330\n     */                                                                                                               // 1331\n    requireFailure: function(otherRecognizer) {                                                                       // 1332\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {                                                // 1333\n            return this;                                                                                              // 1334\n        }                                                                                                             // 1335\n                                                                                                                      // 1336\n        var requireFail = this.requireFail;                                                                           // 1337\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);                                        // 1338\n        if (inArray(requireFail, otherRecognizer) === -1) {                                                           // 1339\n            requireFail.push(otherRecognizer);                                                                        // 1340\n            otherRecognizer.requireFailure(this);                                                                     // 1341\n        }                                                                                                             // 1342\n        return this;                                                                                                  // 1343\n    },                                                                                                                // 1344\n                                                                                                                      // 1345\n    /**                                                                                                               // 1346\n     * drop the requireFailure link. it does not remove the link on the other recognizer.                             // 1347\n     * @param {Recognizer} otherRecognizer                                                                            // 1348\n     * @returns {Recognizer} this                                                                                     // 1349\n     */                                                                                                               // 1350\n    dropRequireFailure: function(otherRecognizer) {                                                                   // 1351\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {                                            // 1352\n            return this;                                                                                              // 1353\n        }                                                                                                             // 1354\n                                                                                                                      // 1355\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);                                        // 1356\n        var index = inArray(this.requireFail, otherRecognizer);                                                       // 1357\n        if (index > -1) {                                                                                             // 1358\n            this.requireFail.splice(index, 1);                                                                        // 1359\n        }                                                                                                             // 1360\n        return this;                                                                                                  // 1361\n    },                                                                                                                // 1362\n                                                                                                                      // 1363\n    /**                                                                                                               // 1364\n     * has require failures boolean                                                                                   // 1365\n     * @returns {boolean}                                                                                             // 1366\n     */                                                                                                               // 1367\n    hasRequireFailures: function() {                                                                                  // 1368\n        return this.requireFail.length > 0;                                                                           // 1369\n    },                                                                                                                // 1370\n                                                                                                                      // 1371\n    /**                                                                                                               // 1372\n     * if the recognizer can recognize simultaneous with an other recognizer                                          // 1373\n     * @param {Recognizer} otherRecognizer                                                                            // 1374\n     * @returns {Boolean}                                                                                             // 1375\n     */                                                                                                               // 1376\n    canRecognizeWith: function(otherRecognizer) {                                                                     // 1377\n        return !!this.simultaneous[otherRecognizer.id];                                                               // 1378\n    },                                                                                                                // 1379\n                                                                                                                      // 1380\n    /**                                                                                                               // 1381\n     * You should use `tryEmit` instead of `emit` directly to check                                                   // 1382\n     * that all the needed recognizers has failed before emitting.                                                    // 1383\n     * @param {Object} input                                                                                          // 1384\n     */                                                                                                               // 1385\n    emit: function(input) {                                                                                           // 1386\n        var self = this;                                                                                              // 1387\n        var state = this.state;                                                                                       // 1388\n                                                                                                                      // 1389\n        function emit(withState) {                                                                                    // 1390\n            self.manager.emit(self.options.event + (withState ? stateStr(state) : ''), input);                        // 1391\n        }                                                                                                             // 1392\n                                                                                                                      // 1393\n        // 'panstart' and 'panmove'                                                                                   // 1394\n        if (state < STATE_ENDED) {                                                                                    // 1395\n            emit(true);                                                                                               // 1396\n        }                                                                                                             // 1397\n                                                                                                                      // 1398\n        emit(); // simple 'eventName' events                                                                          // 1399\n                                                                                                                      // 1400\n        // panend and pancancel                                                                                       // 1401\n        if (state >= STATE_ENDED) {                                                                                   // 1402\n            emit(true);                                                                                               // 1403\n        }                                                                                                             // 1404\n    },                                                                                                                // 1405\n                                                                                                                      // 1406\n    /**                                                                                                               // 1407\n     * Check that all the require failure recognizers has failed,                                                     // 1408\n     * if true, it emits a gesture event,                                                                             // 1409\n     * otherwise, setup the state to FAILED.                                                                          // 1410\n     * @param {Object} input                                                                                          // 1411\n     */                                                                                                               // 1412\n    tryEmit: function(input) {                                                                                        // 1413\n        if (this.canEmit()) {                                                                                         // 1414\n            return this.emit(input);                                                                                  // 1415\n        }                                                                                                             // 1416\n        // it's failing anyway                                                                                        // 1417\n        this.state = STATE_FAILED;                                                                                    // 1418\n    },                                                                                                                // 1419\n                                                                                                                      // 1420\n    /**                                                                                                               // 1421\n     * can we emit?                                                                                                   // 1422\n     * @returns {boolean}                                                                                             // 1423\n     */                                                                                                               // 1424\n    canEmit: function() {                                                                                             // 1425\n        var i = 0;                                                                                                    // 1426\n        while (i < this.requireFail.length) {                                                                         // 1427\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {                                     // 1428\n                return false;                                                                                         // 1429\n            }                                                                                                         // 1430\n            i++;                                                                                                      // 1431\n        }                                                                                                             // 1432\n        return true;                                                                                                  // 1433\n    },                                                                                                                // 1434\n                                                                                                                      // 1435\n    /**                                                                                                               // 1436\n     * update the recognizer                                                                                          // 1437\n     * @param {Object} inputData                                                                                      // 1438\n     */                                                                                                               // 1439\n    recognize: function(inputData) {                                                                                  // 1440\n        // make a new copy of the inputData                                                                           // 1441\n        // so we can change the inputData without messing up the other recognizers                                    // 1442\n        var inputDataClone = extend({}, inputData);                                                                   // 1443\n                                                                                                                      // 1444\n        // is is enabled and allow recognizing?                                                                       // 1445\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {                                                 // 1446\n            this.reset();                                                                                             // 1447\n            this.state = STATE_FAILED;                                                                                // 1448\n            return;                                                                                                   // 1449\n        }                                                                                                             // 1450\n                                                                                                                      // 1451\n        // reset when we've reached the end                                                                           // 1452\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {                                       // 1453\n            this.state = STATE_POSSIBLE;                                                                              // 1454\n        }                                                                                                             // 1455\n                                                                                                                      // 1456\n        this.state = this.process(inputDataClone);                                                                    // 1457\n                                                                                                                      // 1458\n        // the recognizer has recognized a gesture                                                                    // 1459\n        // so trigger an event                                                                                        // 1460\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {                             // 1461\n            this.tryEmit(inputDataClone);                                                                             // 1462\n        }                                                                                                             // 1463\n    },                                                                                                                // 1464\n                                                                                                                      // 1465\n    /**                                                                                                               // 1466\n     * return the state of the recognizer                                                                             // 1467\n     * the actual recognizing happens in this method                                                                  // 1468\n     * @virtual                                                                                                       // 1469\n     * @param {Object} inputData                                                                                      // 1470\n     * @returns {Const} STATE                                                                                         // 1471\n     */                                                                                                               // 1472\n    process: function(inputData) { }, // jshint ignore:line                                                           // 1473\n                                                                                                                      // 1474\n    /**                                                                                                               // 1475\n     * return the preferred touch-action                                                                              // 1476\n     * @virtual                                                                                                       // 1477\n     * @returns {Array}                                                                                               // 1478\n     */                                                                                                               // 1479\n    getTouchAction: function() { },                                                                                   // 1480\n                                                                                                                      // 1481\n    /**                                                                                                               // 1482\n     * called when the gesture isn't allowed to recognize                                                             // 1483\n     * like when another is being recognized or it is disabled                                                        // 1484\n     * @virtual                                                                                                       // 1485\n     */                                                                                                               // 1486\n    reset: function() { }                                                                                             // 1487\n};                                                                                                                    // 1488\n                                                                                                                      // 1489\n/**                                                                                                                   // 1490\n * get a usable string, used as event postfix                                                                         // 1491\n * @param {Const} state                                                                                               // 1492\n * @returns {String} state                                                                                            // 1493\n */                                                                                                                   // 1494\nfunction stateStr(state) {                                                                                            // 1495\n    if (state & STATE_CANCELLED) {                                                                                    // 1496\n        return 'cancel';                                                                                              // 1497\n    } else if (state & STATE_ENDED) {                                                                                 // 1498\n        return 'end';                                                                                                 // 1499\n    } else if (state & STATE_CHANGED) {                                                                               // 1500\n        return 'move';                                                                                                // 1501\n    } else if (state & STATE_BEGAN) {                                                                                 // 1502\n        return 'start';                                                                                               // 1503\n    }                                                                                                                 // 1504\n    return '';                                                                                                        // 1505\n}                                                                                                                     // 1506\n                                                                                                                      // 1507\n/**                                                                                                                   // 1508\n * direction cons to string                                                                                           // 1509\n * @param {Const} direction                                                                                           // 1510\n * @returns {String}                                                                                                  // 1511\n */                                                                                                                   // 1512\nfunction directionStr(direction) {                                                                                    // 1513\n    if (direction == DIRECTION_DOWN) {                                                                                // 1514\n        return 'down';                                                                                                // 1515\n    } else if (direction == DIRECTION_UP) {                                                                           // 1516\n        return 'up';                                                                                                  // 1517\n    } else if (direction == DIRECTION_LEFT) {                                                                         // 1518\n        return 'left';                                                                                                // 1519\n    } else if (direction == DIRECTION_RIGHT) {                                                                        // 1520\n        return 'right';                                                                                               // 1521\n    }                                                                                                                 // 1522\n    return '';                                                                                                        // 1523\n}                                                                                                                     // 1524\n                                                                                                                      // 1525\n/**                                                                                                                   // 1526\n * get a recognizer by name if it is bound to a manager                                                               // 1527\n * @param {Recognizer|String} otherRecognizer                                                                         // 1528\n * @param {Recognizer} recognizer                                                                                     // 1529\n * @returns {Recognizer}                                                                                              // 1530\n */                                                                                                                   // 1531\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {                                                  // 1532\n    var manager = recognizer.manager;                                                                                 // 1533\n    if (manager) {                                                                                                    // 1534\n        return manager.get(otherRecognizer);                                                                          // 1535\n    }                                                                                                                 // 1536\n    return otherRecognizer;                                                                                           // 1537\n}                                                                                                                     // 1538\n                                                                                                                      // 1539\n/**                                                                                                                   // 1540\n * This recognizer is just used as a base for the simple attribute recognizers.                                       // 1541\n * @constructor                                                                                                       // 1542\n * @extends Recognizer                                                                                                // 1543\n */                                                                                                                   // 1544\nfunction AttrRecognizer() {                                                                                           // 1545\n    Recognizer.apply(this, arguments);                                                                                // 1546\n}                                                                                                                     // 1547\n                                                                                                                      // 1548\ninherit(AttrRecognizer, Recognizer, {                                                                                 // 1549\n    /**                                                                                                               // 1550\n     * @namespace                                                                                                     // 1551\n     * @memberof AttrRecognizer                                                                                       // 1552\n     */                                                                                                               // 1553\n    defaults: {                                                                                                       // 1554\n        /**                                                                                                           // 1555\n         * @type {Number}                                                                                             // 1556\n         * @default 1                                                                                                 // 1557\n         */                                                                                                           // 1558\n        pointers: 1                                                                                                   // 1559\n    },                                                                                                                // 1560\n                                                                                                                      // 1561\n    /**                                                                                                               // 1562\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.                             // 1563\n     * @memberof AttrRecognizer                                                                                       // 1564\n     * @param {Object} input                                                                                          // 1565\n     * @returns {Boolean} recognized                                                                                  // 1566\n     */                                                                                                               // 1567\n    attrTest: function(input) {                                                                                       // 1568\n        var optionPointers = this.options.pointers;                                                                   // 1569\n        return optionPointers === 0 || input.pointers.length === optionPointers;                                      // 1570\n    },                                                                                                                // 1571\n                                                                                                                      // 1572\n    /**                                                                                                               // 1573\n     * Process the input and return the state for the recognizer                                                      // 1574\n     * @memberof AttrRecognizer                                                                                       // 1575\n     * @param {Object} input                                                                                          // 1576\n     * @returns {*} State                                                                                             // 1577\n     */                                                                                                               // 1578\n    process: function(input) {                                                                                        // 1579\n        var state = this.state;                                                                                       // 1580\n        var eventType = input.eventType;                                                                              // 1581\n                                                                                                                      // 1582\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);                                                     // 1583\n        var isValid = this.attrTest(input);                                                                           // 1584\n                                                                                                                      // 1585\n        // on cancel input and we've recognized before, return STATE_CANCELLED                                        // 1586\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {                                                 // 1587\n            return state | STATE_CANCELLED;                                                                           // 1588\n        } else if (isRecognized || isValid) {                                                                         // 1589\n            if (eventType & INPUT_END) {                                                                              // 1590\n                return state | STATE_ENDED;                                                                           // 1591\n            } else if (!(state & STATE_BEGAN)) {                                                                      // 1592\n                return STATE_BEGAN;                                                                                   // 1593\n            }                                                                                                         // 1594\n            return state | STATE_CHANGED;                                                                             // 1595\n        }                                                                                                             // 1596\n        return STATE_FAILED;                                                                                          // 1597\n    }                                                                                                                 // 1598\n});                                                                                                                   // 1599\n                                                                                                                      // 1600\n/**                                                                                                                   // 1601\n * Pan                                                                                                                // 1602\n * Recognized when the pointer is down and moved in the allowed direction.                                            // 1603\n * @constructor                                                                                                       // 1604\n * @extends AttrRecognizer                                                                                            // 1605\n */                                                                                                                   // 1606\nfunction PanRecognizer() {                                                                                            // 1607\n    AttrRecognizer.apply(this, arguments);                                                                            // 1608\n                                                                                                                      // 1609\n    this.pX = null;                                                                                                   // 1610\n    this.pY = null;                                                                                                   // 1611\n}                                                                                                                     // 1612\n                                                                                                                      // 1613\ninherit(PanRecognizer, AttrRecognizer, {                                                                              // 1614\n    /**                                                                                                               // 1615\n     * @namespace                                                                                                     // 1616\n     * @memberof PanRecognizer                                                                                        // 1617\n     */                                                                                                               // 1618\n    defaults: {                                                                                                       // 1619\n        event: 'pan',                                                                                                 // 1620\n        threshold: 10,                                                                                                // 1621\n        pointers: 1,                                                                                                  // 1622\n        direction: DIRECTION_ALL                                                                                      // 1623\n    },                                                                                                                // 1624\n                                                                                                                      // 1625\n    getTouchAction: function() {                                                                                      // 1626\n        var direction = this.options.direction;                                                                       // 1627\n        var actions = [];                                                                                             // 1628\n        if (direction & DIRECTION_HORIZONTAL) {                                                                       // 1629\n            actions.push(TOUCH_ACTION_PAN_Y);                                                                         // 1630\n        }                                                                                                             // 1631\n        if (direction & DIRECTION_VERTICAL) {                                                                         // 1632\n            actions.push(TOUCH_ACTION_PAN_X);                                                                         // 1633\n        }                                                                                                             // 1634\n        return actions;                                                                                               // 1635\n    },                                                                                                                // 1636\n                                                                                                                      // 1637\n    directionTest: function(input) {                                                                                  // 1638\n        var options = this.options;                                                                                   // 1639\n        var hasMoved = true;                                                                                          // 1640\n        var distance = input.distance;                                                                                // 1641\n        var direction = input.direction;                                                                              // 1642\n        var x = input.deltaX;                                                                                         // 1643\n        var y = input.deltaY;                                                                                         // 1644\n                                                                                                                      // 1645\n        // lock to axis?                                                                                              // 1646\n        if (!(direction & options.direction)) {                                                                       // 1647\n            if (options.direction & DIRECTION_HORIZONTAL) {                                                           // 1648\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;                  // 1649\n                hasMoved = x != this.pX;                                                                              // 1650\n                distance = Math.abs(input.deltaX);                                                                    // 1651\n            } else {                                                                                                  // 1652\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;                     // 1653\n                hasMoved = y != this.pY;                                                                              // 1654\n                distance = Math.abs(input.deltaY);                                                                    // 1655\n            }                                                                                                         // 1656\n        }                                                                                                             // 1657\n        input.direction = direction;                                                                                  // 1658\n        return hasMoved && distance > options.threshold && direction & options.direction;                             // 1659\n    },                                                                                                                // 1660\n                                                                                                                      // 1661\n    attrTest: function(input) {                                                                                       // 1662\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&                                                 // 1663\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));                 // 1664\n    },                                                                                                                // 1665\n                                                                                                                      // 1666\n    emit: function(input) {                                                                                           // 1667\n        this.pX = input.deltaX;                                                                                       // 1668\n        this.pY = input.deltaY;                                                                                       // 1669\n                                                                                                                      // 1670\n        var direction = directionStr(input.direction);                                                                // 1671\n        if (direction) {                                                                                              // 1672\n            this.manager.emit(this.options.event + direction, input);                                                 // 1673\n        }                                                                                                             // 1674\n                                                                                                                      // 1675\n        this._super.emit.call(this, input);                                                                           // 1676\n    }                                                                                                                 // 1677\n});                                                                                                                   // 1678\n                                                                                                                      // 1679\n/**                                                                                                                   // 1680\n * Pinch                                                                                                              // 1681\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).               // 1682\n * @constructor                                                                                                       // 1683\n * @extends AttrRecognizer                                                                                            // 1684\n */                                                                                                                   // 1685\nfunction PinchRecognizer() {                                                                                          // 1686\n    AttrRecognizer.apply(this, arguments);                                                                            // 1687\n}                                                                                                                     // 1688\n                                                                                                                      // 1689\ninherit(PinchRecognizer, AttrRecognizer, {                                                                            // 1690\n    /**                                                                                                               // 1691\n     * @namespace                                                                                                     // 1692\n     * @memberof PinchRecognizer                                                                                      // 1693\n     */                                                                                                               // 1694\n    defaults: {                                                                                                       // 1695\n        event: 'pinch',                                                                                               // 1696\n        threshold: 0,                                                                                                 // 1697\n        pointers: 2                                                                                                   // 1698\n    },                                                                                                                // 1699\n                                                                                                                      // 1700\n    getTouchAction: function() {                                                                                      // 1701\n        return [TOUCH_ACTION_NONE];                                                                                   // 1702\n    },                                                                                                                // 1703\n                                                                                                                      // 1704\n    attrTest: function(input) {                                                                                       // 1705\n        return this._super.attrTest.call(this, input) &&                                                              // 1706\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);                         // 1707\n    },                                                                                                                // 1708\n                                                                                                                      // 1709\n    emit: function(input) {                                                                                           // 1710\n        this._super.emit.call(this, input);                                                                           // 1711\n        if (input.scale !== 1) {                                                                                      // 1712\n            var inOut = input.scale < 1 ? 'in' : 'out';                                                               // 1713\n            this.manager.emit(this.options.event + inOut, input);                                                     // 1714\n        }                                                                                                             // 1715\n    }                                                                                                                 // 1716\n});                                                                                                                   // 1717\n                                                                                                                      // 1718\n/**                                                                                                                   // 1719\n * Press                                                                                                              // 1720\n * Recognized when the pointer is down for x ms without any movement.                                                 // 1721\n * @constructor                                                                                                       // 1722\n * @extends Recognizer                                                                                                // 1723\n */                                                                                                                   // 1724\nfunction PressRecognizer() {                                                                                          // 1725\n    Recognizer.apply(this, arguments);                                                                                // 1726\n                                                                                                                      // 1727\n    this._timer = null;                                                                                               // 1728\n    this._input = null;                                                                                               // 1729\n}                                                                                                                     // 1730\n                                                                                                                      // 1731\ninherit(PressRecognizer, Recognizer, {                                                                                // 1732\n    /**                                                                                                               // 1733\n     * @namespace                                                                                                     // 1734\n     * @memberof PressRecognizer                                                                                      // 1735\n     */                                                                                                               // 1736\n    defaults: {                                                                                                       // 1737\n        event: 'press',                                                                                               // 1738\n        pointers: 1,                                                                                                  // 1739\n        time: 500, // minimal time of the pointer to be pressed                                                       // 1740\n        threshold: 5 // a minimal movement is ok, but keep it low                                                     // 1741\n    },                                                                                                                // 1742\n                                                                                                                      // 1743\n    getTouchAction: function() {                                                                                      // 1744\n        return [TOUCH_ACTION_AUTO];                                                                                   // 1745\n    },                                                                                                                // 1746\n                                                                                                                      // 1747\n    process: function(input) {                                                                                        // 1748\n        var options = this.options;                                                                                   // 1749\n        var validPointers = input.pointers.length === options.pointers;                                               // 1750\n        var validMovement = input.distance < options.threshold;                                                       // 1751\n        var validTime = input.deltaTime > options.time;                                                               // 1752\n                                                                                                                      // 1753\n        this._input = input;                                                                                          // 1754\n                                                                                                                      // 1755\n        // we only allow little movement                                                                              // 1756\n        // and we've reached an end event, so a tap is possible                                                       // 1757\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {       // 1758\n            this.reset();                                                                                             // 1759\n        } else if (input.eventType & INPUT_START) {                                                                   // 1760\n            this.reset();                                                                                             // 1761\n            this._timer = setTimeoutContext(function() {                                                              // 1762\n                this.state = STATE_RECOGNIZED;                                                                        // 1763\n                this.tryEmit();                                                                                       // 1764\n            }, options.time, this);                                                                                   // 1765\n        } else if (input.eventType & INPUT_END) {                                                                     // 1766\n            return STATE_RECOGNIZED;                                                                                  // 1767\n        }                                                                                                             // 1768\n        return STATE_FAILED;                                                                                          // 1769\n    },                                                                                                                // 1770\n                                                                                                                      // 1771\n    reset: function() {                                                                                               // 1772\n        clearTimeout(this._timer);                                                                                    // 1773\n    },                                                                                                                // 1774\n                                                                                                                      // 1775\n    emit: function(input) {                                                                                           // 1776\n        if (this.state !== STATE_RECOGNIZED) {                                                                        // 1777\n            return;                                                                                                   // 1778\n        }                                                                                                             // 1779\n                                                                                                                      // 1780\n        if (input && (input.eventType & INPUT_END)) {                                                                 // 1781\n            this.manager.emit(this.options.event + 'up', input);                                                      // 1782\n        } else {                                                                                                      // 1783\n            this._input.timeStamp = now();                                                                            // 1784\n            this.manager.emit(this.options.event, this._input);                                                       // 1785\n        }                                                                                                             // 1786\n    }                                                                                                                 // 1787\n});                                                                                                                   // 1788\n                                                                                                                      // 1789\n/**                                                                                                                   // 1790\n * Rotate                                                                                                             // 1791\n * Recognized when two or more pointer are moving in a circular motion.                                               // 1792\n * @constructor                                                                                                       // 1793\n * @extends AttrRecognizer                                                                                            // 1794\n */                                                                                                                   // 1795\nfunction RotateRecognizer() {                                                                                         // 1796\n    AttrRecognizer.apply(this, arguments);                                                                            // 1797\n}                                                                                                                     // 1798\n                                                                                                                      // 1799\ninherit(RotateRecognizer, AttrRecognizer, {                                                                           // 1800\n    /**                                                                                                               // 1801\n     * @namespace                                                                                                     // 1802\n     * @memberof RotateRecognizer                                                                                     // 1803\n     */                                                                                                               // 1804\n    defaults: {                                                                                                       // 1805\n        event: 'rotate',                                                                                              // 1806\n        threshold: 0,                                                                                                 // 1807\n        pointers: 2                                                                                                   // 1808\n    },                                                                                                                // 1809\n                                                                                                                      // 1810\n    getTouchAction: function() {                                                                                      // 1811\n        return [TOUCH_ACTION_NONE];                                                                                   // 1812\n    },                                                                                                                // 1813\n                                                                                                                      // 1814\n    attrTest: function(input) {                                                                                       // 1815\n        return this._super.attrTest.call(this, input) &&                                                              // 1816\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);                          // 1817\n    }                                                                                                                 // 1818\n});                                                                                                                   // 1819\n                                                                                                                      // 1820\n/**                                                                                                                   // 1821\n * Swipe                                                                                                              // 1822\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.              // 1823\n * @constructor                                                                                                       // 1824\n * @extends AttrRecognizer                                                                                            // 1825\n */                                                                                                                   // 1826\nfunction SwipeRecognizer() {                                                                                          // 1827\n    AttrRecognizer.apply(this, arguments);                                                                            // 1828\n}                                                                                                                     // 1829\n                                                                                                                      // 1830\ninherit(SwipeRecognizer, AttrRecognizer, {                                                                            // 1831\n    /**                                                                                                               // 1832\n     * @namespace                                                                                                     // 1833\n     * @memberof SwipeRecognizer                                                                                      // 1834\n     */                                                                                                               // 1835\n    defaults: {                                                                                                       // 1836\n        event: 'swipe',                                                                                               // 1837\n        threshold: 10,                                                                                                // 1838\n        velocity: 0.65,                                                                                               // 1839\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,                                                         // 1840\n        pointers: 1                                                                                                   // 1841\n    },                                                                                                                // 1842\n                                                                                                                      // 1843\n    getTouchAction: function() {                                                                                      // 1844\n        return PanRecognizer.prototype.getTouchAction.call(this);                                                     // 1845\n    },                                                                                                                // 1846\n                                                                                                                      // 1847\n    attrTest: function(input) {                                                                                       // 1848\n        var direction = this.options.direction;                                                                       // 1849\n        var velocity;                                                                                                 // 1850\n                                                                                                                      // 1851\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {                                                // 1852\n            velocity = input.velocity;                                                                                // 1853\n        } else if (direction & DIRECTION_HORIZONTAL) {                                                                // 1854\n            velocity = input.velocityX;                                                                               // 1855\n        } else if (direction & DIRECTION_VERTICAL) {                                                                  // 1856\n            velocity = input.velocityY;                                                                               // 1857\n        }                                                                                                             // 1858\n                                                                                                                      // 1859\n        return this._super.attrTest.call(this, input) &&                                                              // 1860\n            direction & input.direction &&                                                                            // 1861\n            input.distance > this.options.threshold &&                                                                // 1862\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;                                     // 1863\n    },                                                                                                                // 1864\n                                                                                                                      // 1865\n    emit: function(input) {                                                                                           // 1866\n        var direction = directionStr(input.direction);                                                                // 1867\n        if (direction) {                                                                                              // 1868\n            this.manager.emit(this.options.event + direction, input);                                                 // 1869\n        }                                                                                                             // 1870\n                                                                                                                      // 1871\n        this.manager.emit(this.options.event, input);                                                                 // 1872\n    }                                                                                                                 // 1873\n});                                                                                                                   // 1874\n                                                                                                                      // 1875\n/**                                                                                                                   // 1876\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur         // 1877\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing       // 1878\n * a single tap.                                                                                                      // 1879\n *                                                                                                                    // 1880\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of                // 1881\n * multi-taps being recognized.                                                                                       // 1882\n * @constructor                                                                                                       // 1883\n * @extends Recognizer                                                                                                // 1884\n */                                                                                                                   // 1885\nfunction TapRecognizer() {                                                                                            // 1886\n    Recognizer.apply(this, arguments);                                                                                // 1887\n                                                                                                                      // 1888\n    // previous time and center,                                                                                      // 1889\n    // used for tap counting                                                                                          // 1890\n    this.pTime = false;                                                                                               // 1891\n    this.pCenter = false;                                                                                             // 1892\n                                                                                                                      // 1893\n    this._timer = null;                                                                                               // 1894\n    this._input = null;                                                                                               // 1895\n    this.count = 0;                                                                                                   // 1896\n}                                                                                                                     // 1897\n                                                                                                                      // 1898\ninherit(TapRecognizer, Recognizer, {                                                                                  // 1899\n    /**                                                                                                               // 1900\n     * @namespace                                                                                                     // 1901\n     * @memberof PinchRecognizer                                                                                      // 1902\n     */                                                                                                               // 1903\n    defaults: {                                                                                                       // 1904\n        event: 'tap',                                                                                                 // 1905\n        pointers: 1,                                                                                                  // 1906\n        taps: 1,                                                                                                      // 1907\n        interval: 300, // max time between the multi-tap taps                                                         // 1908\n        time: 250, // max time of the pointer to be down (like finger on the screen)                                  // 1909\n        threshold: 2, // a minimal movement is ok, but keep it low                                                    // 1910\n        posThreshold: 10 // a multi-tap can be a bit off the initial position                                         // 1911\n    },                                                                                                                // 1912\n                                                                                                                      // 1913\n    getTouchAction: function() {                                                                                      // 1914\n        return [TOUCH_ACTION_MANIPULATION];                                                                           // 1915\n    },                                                                                                                // 1916\n                                                                                                                      // 1917\n    process: function(input) {                                                                                        // 1918\n        var options = this.options;                                                                                   // 1919\n                                                                                                                      // 1920\n        var validPointers = input.pointers.length === options.pointers;                                               // 1921\n        var validMovement = input.distance < options.threshold;                                                       // 1922\n        var validTouchTime = input.deltaTime < options.time;                                                          // 1923\n                                                                                                                      // 1924\n        this.reset();                                                                                                 // 1925\n                                                                                                                      // 1926\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {                                                  // 1927\n            return this.failTimeout();                                                                                // 1928\n        }                                                                                                             // 1929\n                                                                                                                      // 1930\n        // we only allow little movement                                                                              // 1931\n        // and we've reached an end event, so a tap is possible                                                       // 1932\n        if (validMovement && validTouchTime && validPointers) {                                                       // 1933\n            if (input.eventType != INPUT_END) {                                                                       // 1934\n                return this.failTimeout();                                                                            // 1935\n            }                                                                                                         // 1936\n                                                                                                                      // 1937\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;                // 1938\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;      // 1939\n                                                                                                                      // 1940\n            this.pTime = input.timeStamp;                                                                             // 1941\n            this.pCenter = input.center;                                                                              // 1942\n                                                                                                                      // 1943\n            if (!validMultiTap || !validInterval) {                                                                   // 1944\n                this.count = 1;                                                                                       // 1945\n            } else {                                                                                                  // 1946\n                this.count += 1;                                                                                      // 1947\n            }                                                                                                         // 1948\n                                                                                                                      // 1949\n            this._input = input;                                                                                      // 1950\n                                                                                                                      // 1951\n            // if tap count matches we have recognized it,                                                            // 1952\n            // else it has began recognizing...                                                                       // 1953\n            var tapCount = this.count % options.taps;                                                                 // 1954\n            if (tapCount === 0) {                                                                                     // 1955\n                // no failing requirements, immediately trigger the tap event                                         // 1956\n                // or wait as long as the multitap interval to trigger                                                // 1957\n                if (!this.hasRequireFailures()) {                                                                     // 1958\n                    return STATE_RECOGNIZED;                                                                          // 1959\n                } else {                                                                                              // 1960\n                    this._timer = setTimeoutContext(function() {                                                      // 1961\n                        this.state = STATE_RECOGNIZED;                                                                // 1962\n                        this.tryEmit();                                                                               // 1963\n                    }, options.interval, this);                                                                       // 1964\n                    return STATE_BEGAN;                                                                               // 1965\n                }                                                                                                     // 1966\n            }                                                                                                         // 1967\n        }                                                                                                             // 1968\n        return STATE_FAILED;                                                                                          // 1969\n    },                                                                                                                // 1970\n                                                                                                                      // 1971\n    failTimeout: function() {                                                                                         // 1972\n        this._timer = setTimeoutContext(function() {                                                                  // 1973\n            this.state = STATE_FAILED;                                                                                // 1974\n        }, this.options.interval, this);                                                                              // 1975\n        return STATE_FAILED;                                                                                          // 1976\n    },                                                                                                                // 1977\n                                                                                                                      // 1978\n    reset: function() {                                                                                               // 1979\n        clearTimeout(this._timer);                                                                                    // 1980\n    },                                                                                                                // 1981\n                                                                                                                      // 1982\n    emit: function() {                                                                                                // 1983\n        if (this.state == STATE_RECOGNIZED ) {                                                                        // 1984\n            this._input.tapCount = this.count;                                                                        // 1985\n            this.manager.emit(this.options.event, this._input);                                                       // 1986\n        }                                                                                                             // 1987\n    }                                                                                                                 // 1988\n});                                                                                                                   // 1989\n                                                                                                                      // 1990\n/**                                                                                                                   // 1991\n * Simple way to create an manager with a default set of recognizers.                                                 // 1992\n * @param {HTMLElement} element                                                                                       // 1993\n * @param {Object} [options]                                                                                          // 1994\n * @constructor                                                                                                       // 1995\n */                                                                                                                   // 1996\nfunction Hammer(element, options) {                                                                                   // 1997\n    options = options || {};                                                                                          // 1998\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);                                   // 1999\n    return new Manager(element, options);                                                                             // 2000\n}                                                                                                                     // 2001\n                                                                                                                      // 2002\n/**                                                                                                                   // 2003\n * @const {string}                                                                                                    // 2004\n */                                                                                                                   // 2005\nHammer.VERSION = '2.0.4';                                                                                             // 2006\n                                                                                                                      // 2007\n/**                                                                                                                   // 2008\n * default settings                                                                                                   // 2009\n * @namespace                                                                                                         // 2010\n */                                                                                                                   // 2011\nHammer.defaults = {                                                                                                   // 2012\n    /**                                                                                                               // 2013\n     * set if DOM events are being triggered.                                                                         // 2014\n     * But this is slower and unused by simple implementations, so disabled by default.                               // 2015\n     * @type {Boolean}                                                                                                // 2016\n     * @default false                                                                                                 // 2017\n     */                                                                                                               // 2018\n    domEvents: false,                                                                                                 // 2019\n                                                                                                                      // 2020\n    /**                                                                                                               // 2021\n     * The value for the touchAction property/fallback.                                                               // 2022\n     * When set to `compute` it will magically set the correct value based on the added recognizers.                  // 2023\n     * @type {String}                                                                                                 // 2024\n     * @default compute                                                                                               // 2025\n     */                                                                                                               // 2026\n    touchAction: TOUCH_ACTION_COMPUTE,                                                                                // 2027\n                                                                                                                      // 2028\n    /**                                                                                                               // 2029\n     * @type {Boolean}                                                                                                // 2030\n     * @default true                                                                                                  // 2031\n     */                                                                                                               // 2032\n    enable: true,                                                                                                     // 2033\n                                                                                                                      // 2034\n    /**                                                                                                               // 2035\n     * EXPERIMENTAL FEATURE -- can be removed/changed                                                                 // 2036\n     * Change the parent input target element.                                                                        // 2037\n     * If Null, then it is being set the to main element.                                                             // 2038\n     * @type {Null|EventTarget}                                                                                       // 2039\n     * @default null                                                                                                  // 2040\n     */                                                                                                               // 2041\n    inputTarget: null,                                                                                                // 2042\n                                                                                                                      // 2043\n    /**                                                                                                               // 2044\n     * force an input class                                                                                           // 2045\n     * @type {Null|Function}                                                                                          // 2046\n     * @default null                                                                                                  // 2047\n     */                                                                                                               // 2048\n    inputClass: null,                                                                                                 // 2049\n                                                                                                                      // 2050\n    /**                                                                                                               // 2051\n     * Default recognizer setup when calling `Hammer()`                                                               // 2052\n     * When creating a new Manager these will be skipped.                                                             // 2053\n     * @type {Array}                                                                                                  // 2054\n     */                                                                                                               // 2055\n    preset: [                                                                                                         // 2056\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]                                      // 2057\n        [RotateRecognizer, { enable: false }],                                                                        // 2058\n        [PinchRecognizer, { enable: false }, ['rotate']],                                                             // 2059\n        [SwipeRecognizer,{ direction: DIRECTION_HORIZONTAL }],                                                        // 2060\n        [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']],                                              // 2061\n        [TapRecognizer],                                                                                              // 2062\n        [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']],                                                    // 2063\n        [PressRecognizer]                                                                                             // 2064\n    ],                                                                                                                // 2065\n                                                                                                                      // 2066\n    /**                                                                                                               // 2067\n     * Some CSS properties can be used to improve the working of Hammer.                                              // 2068\n     * Add them to this method and they will be set when creating a new Manager.                                      // 2069\n     * @namespace                                                                                                     // 2070\n     */                                                                                                               // 2071\n    cssProps: {                                                                                                       // 2072\n        /**                                                                                                           // 2073\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.                      // 2074\n         * @type {String}                                                                                             // 2075\n         * @default 'none'                                                                                            // 2076\n         */                                                                                                           // 2077\n        userSelect: 'none',                                                                                           // 2078\n                                                                                                                      // 2079\n        /**                                                                                                           // 2080\n         * Disable the Windows Phone grippers when pressing an element.                                               // 2081\n         * @type {String}                                                                                             // 2082\n         * @default 'none'                                                                                            // 2083\n         */                                                                                                           // 2084\n        touchSelect: 'none',                                                                                          // 2085\n                                                                                                                      // 2086\n        /**                                                                                                           // 2087\n         * Disables the default callout shown when you touch and hold a touch target.                                 // 2088\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays                             // 2089\n         * a callout containing information about the link. This property allows you to disable that callout.         // 2090\n         * @type {String}                                                                                             // 2091\n         * @default 'none'                                                                                            // 2092\n         */                                                                                                           // 2093\n        touchCallout: 'none',                                                                                         // 2094\n                                                                                                                      // 2095\n        /**                                                                                                           // 2096\n         * Specifies whether zooming is enabled. Used by IE10>                                                        // 2097\n         * @type {String}                                                                                             // 2098\n         * @default 'none'                                                                                            // 2099\n         */                                                                                                           // 2100\n        contentZooming: 'none',                                                                                       // 2101\n                                                                                                                      // 2102\n        /**                                                                                                           // 2103\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers. // 2104\n         * @type {String}                                                                                             // 2105\n         * @default 'none'                                                                                            // 2106\n         */                                                                                                           // 2107\n        userDrag: 'none',                                                                                             // 2108\n                                                                                                                      // 2109\n        /**                                                                                                           // 2110\n         * Overrides the highlight color shown when the user taps a link or a JavaScript                              // 2111\n         * clickable element in iOS. This property obeys the alpha value, if specified.                               // 2112\n         * @type {String}                                                                                             // 2113\n         * @default 'rgba(0,0,0,0)'                                                                                   // 2114\n         */                                                                                                           // 2115\n        tapHighlightColor: 'rgba(0,0,0,0)'                                                                            // 2116\n    }                                                                                                                 // 2117\n};                                                                                                                    // 2118\n                                                                                                                      // 2119\nvar STOP = 1;                                                                                                         // 2120\nvar FORCED_STOP = 2;                                                                                                  // 2121\n                                                                                                                      // 2122\n/**                                                                                                                   // 2123\n * Manager                                                                                                            // 2124\n * @param {HTMLElement} element                                                                                       // 2125\n * @param {Object} [options]                                                                                          // 2126\n * @constructor                                                                                                       // 2127\n */                                                                                                                   // 2128\nfunction Manager(element, options) {                                                                                  // 2129\n    options = options || {};                                                                                          // 2130\n                                                                                                                      // 2131\n    this.options = merge(options, Hammer.defaults);                                                                   // 2132\n    this.options.inputTarget = this.options.inputTarget || element;                                                   // 2133\n                                                                                                                      // 2134\n    this.handlers = {};                                                                                               // 2135\n    this.session = {};                                                                                                // 2136\n    this.recognizers = [];                                                                                            // 2137\n                                                                                                                      // 2138\n    this.element = element;                                                                                           // 2139\n    this.input = createInputInstance(this);                                                                           // 2140\n    this.touchAction = new TouchAction(this, this.options.touchAction);                                               // 2141\n                                                                                                                      // 2142\n    toggleCssProps(this, true);                                                                                       // 2143\n                                                                                                                      // 2144\n    each(options.recognizers, function(item) {                                                                        // 2145\n        var recognizer = this.add(new (item[0])(item[1]));                                                            // 2146\n        item[2] && recognizer.recognizeWith(item[2]);                                                                 // 2147\n        item[3] && recognizer.requireFailure(item[3]);                                                                // 2148\n    }, this);                                                                                                         // 2149\n}                                                                                                                     // 2150\n                                                                                                                      // 2151\nManager.prototype = {                                                                                                 // 2152\n    /**                                                                                                               // 2153\n     * set options                                                                                                    // 2154\n     * @param {Object} options                                                                                        // 2155\n     * @returns {Manager}                                                                                             // 2156\n     */                                                                                                               // 2157\n    set: function(options) {                                                                                          // 2158\n        extend(this.options, options);                                                                                // 2159\n                                                                                                                      // 2160\n        // Options that need a little more setup                                                                      // 2161\n        if (options.touchAction) {                                                                                    // 2162\n            this.touchAction.update();                                                                                // 2163\n        }                                                                                                             // 2164\n        if (options.inputTarget) {                                                                                    // 2165\n            // Clean up existing event listeners and reinitialize                                                     // 2166\n            this.input.destroy();                                                                                     // 2167\n            this.input.target = options.inputTarget;                                                                  // 2168\n            this.input.init();                                                                                        // 2169\n        }                                                                                                             // 2170\n        return this;                                                                                                  // 2171\n    },                                                                                                                // 2172\n                                                                                                                      // 2173\n    /**                                                                                                               // 2174\n     * stop recognizing for this session.                                                                             // 2175\n     * This session will be discarded, when a new [input]start event is fired.                                        // 2176\n     * When forced, the recognizer cycle is stopped immediately.                                                      // 2177\n     * @param {Boolean} [force]                                                                                       // 2178\n     */                                                                                                               // 2179\n    stop: function(force) {                                                                                           // 2180\n        this.session.stopped = force ? FORCED_STOP : STOP;                                                            // 2181\n    },                                                                                                                // 2182\n                                                                                                                      // 2183\n    /**                                                                                                               // 2184\n     * run the recognizers!                                                                                           // 2185\n     * called by the inputHandler function on every movement of the pointers (touches)                                // 2186\n     * it walks through all the recognizers and tries to detect the gesture that is being made                        // 2187\n     * @param {Object} inputData                                                                                      // 2188\n     */                                                                                                               // 2189\n    recognize: function(inputData) {                                                                                  // 2190\n        var session = this.session;                                                                                   // 2191\n        if (session.stopped) {                                                                                        // 2192\n            return;                                                                                                   // 2193\n        }                                                                                                             // 2194\n                                                                                                                      // 2195\n        // run the touch-action polyfill                                                                              // 2196\n        this.touchAction.preventDefaults(inputData);                                                                  // 2197\n                                                                                                                      // 2198\n        var recognizer;                                                                                               // 2199\n        var recognizers = this.recognizers;                                                                           // 2200\n                                                                                                                      // 2201\n        // this holds the recognizer that is being recognized.                                                        // 2202\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED                                  // 2203\n        // if no recognizer is detecting a thing, it is set to `null`                                                 // 2204\n        var curRecognizer = session.curRecognizer;                                                                    // 2205\n                                                                                                                      // 2206\n        // reset when the last recognizer is recognized                                                               // 2207\n        // or when we're in a new session                                                                             // 2208\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {                            // 2209\n            curRecognizer = session.curRecognizer = null;                                                             // 2210\n        }                                                                                                             // 2211\n                                                                                                                      // 2212\n        var i = 0;                                                                                                    // 2213\n        while (i < recognizers.length) {                                                                              // 2214\n            recognizer = recognizers[i];                                                                              // 2215\n                                                                                                                      // 2216\n            // find out if we are allowed try to recognize the input for this one.                                    // 2217\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)                               // 2218\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one // 2219\n            //      that is being recognized.                                                                         // 2220\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.    // 2221\n            //      this can be setup with the `recognizeWith()` method on the recognizer.                            // 2222\n            if (session.stopped !== FORCED_STOP && ( // 1                                                             // 2223\n                    !curRecognizer || recognizer == curRecognizer || // 2                                             // 2224\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3                                               // 2225\n                recognizer.recognize(inputData);                                                                      // 2226\n            } else {                                                                                                  // 2227\n                recognizer.reset();                                                                                   // 2228\n            }                                                                                                         // 2229\n                                                                                                                      // 2230\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the  // 2231\n            // current active recognizer. but only if we don't already have an active recognizer                      // 2232\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {                   // 2233\n                curRecognizer = session.curRecognizer = recognizer;                                                   // 2234\n            }                                                                                                         // 2235\n            i++;                                                                                                      // 2236\n        }                                                                                                             // 2237\n    },                                                                                                                // 2238\n                                                                                                                      // 2239\n    /**                                                                                                               // 2240\n     * get a recognizer by its event name.                                                                            // 2241\n     * @param {Recognizer|String} recognizer                                                                          // 2242\n     * @returns {Recognizer|Null}                                                                                     // 2243\n     */                                                                                                               // 2244\n    get: function(recognizer) {                                                                                       // 2245\n        if (recognizer instanceof Recognizer) {                                                                       // 2246\n            return recognizer;                                                                                        // 2247\n        }                                                                                                             // 2248\n                                                                                                                      // 2249\n        var recognizers = this.recognizers;                                                                           // 2250\n        for (var i = 0; i < recognizers.length; i++) {                                                                // 2251\n            if (recognizers[i].options.event == recognizer) {                                                         // 2252\n                return recognizers[i];                                                                                // 2253\n            }                                                                                                         // 2254\n        }                                                                                                             // 2255\n        return null;                                                                                                  // 2256\n    },                                                                                                                // 2257\n                                                                                                                      // 2258\n    /**                                                                                                               // 2259\n     * add a recognizer to the manager                                                                                // 2260\n     * existing recognizers with the same event name will be removed                                                  // 2261\n     * @param {Recognizer} recognizer                                                                                 // 2262\n     * @returns {Recognizer|Manager}                                                                                  // 2263\n     */                                                                                                               // 2264\n    add: function(recognizer) {                                                                                       // 2265\n        if (invokeArrayArg(recognizer, 'add', this)) {                                                                // 2266\n            return this;                                                                                              // 2267\n        }                                                                                                             // 2268\n                                                                                                                      // 2269\n        // remove existing                                                                                            // 2270\n        var existing = this.get(recognizer.options.event);                                                            // 2271\n        if (existing) {                                                                                               // 2272\n            this.remove(existing);                                                                                    // 2273\n        }                                                                                                             // 2274\n                                                                                                                      // 2275\n        this.recognizers.push(recognizer);                                                                            // 2276\n        recognizer.manager = this;                                                                                    // 2277\n                                                                                                                      // 2278\n        this.touchAction.update();                                                                                    // 2279\n        return recognizer;                                                                                            // 2280\n    },                                                                                                                // 2281\n                                                                                                                      // 2282\n    /**                                                                                                               // 2283\n     * remove a recognizer by name or instance                                                                        // 2284\n     * @param {Recognizer|String} recognizer                                                                          // 2285\n     * @returns {Manager}                                                                                             // 2286\n     */                                                                                                               // 2287\n    remove: function(recognizer) {                                                                                    // 2288\n        if (invokeArrayArg(recognizer, 'remove', this)) {                                                             // 2289\n            return this;                                                                                              // 2290\n        }                                                                                                             // 2291\n                                                                                                                      // 2292\n        var recognizers = this.recognizers;                                                                           // 2293\n        recognizer = this.get(recognizer);                                                                            // 2294\n        recognizers.splice(inArray(recognizers, recognizer), 1);                                                      // 2295\n                                                                                                                      // 2296\n        this.touchAction.update();                                                                                    // 2297\n        return this;                                                                                                  // 2298\n    },                                                                                                                // 2299\n                                                                                                                      // 2300\n    /**                                                                                                               // 2301\n     * bind event                                                                                                     // 2302\n     * @param {String} events                                                                                         // 2303\n     * @param {Function} handler                                                                                      // 2304\n     * @returns {EventEmitter} this                                                                                   // 2305\n     */                                                                                                               // 2306\n    on: function(events, handler) {                                                                                   // 2307\n        var handlers = this.handlers;                                                                                 // 2308\n        each(splitStr(events), function(event) {                                                                      // 2309\n            handlers[event] = handlers[event] || [];                                                                  // 2310\n            handlers[event].push(handler);                                                                            // 2311\n        });                                                                                                           // 2312\n        return this;                                                                                                  // 2313\n    },                                                                                                                // 2314\n                                                                                                                      // 2315\n    /**                                                                                                               // 2316\n     * unbind event, leave emit blank to remove all handlers                                                          // 2317\n     * @param {String} events                                                                                         // 2318\n     * @param {Function} [handler]                                                                                    // 2319\n     * @returns {EventEmitter} this                                                                                   // 2320\n     */                                                                                                               // 2321\n    off: function(events, handler) {                                                                                  // 2322\n        var handlers = this.handlers;                                                                                 // 2323\n        each(splitStr(events), function(event) {                                                                      // 2324\n            if (!handler) {                                                                                           // 2325\n                delete handlers[event];                                                                               // 2326\n            } else {                                                                                                  // 2327\n                handlers[event].splice(inArray(handlers[event], handler), 1);                                         // 2328\n            }                                                                                                         // 2329\n        });                                                                                                           // 2330\n        return this;                                                                                                  // 2331\n    },                                                                                                                // 2332\n                                                                                                                      // 2333\n    /**                                                                                                               // 2334\n     * emit event to the listeners                                                                                    // 2335\n     * @param {String} event                                                                                          // 2336\n     * @param {Object} data                                                                                           // 2337\n     */                                                                                                               // 2338\n    emit: function(event, data) {                                                                                     // 2339\n        // we also want to trigger dom events                                                                         // 2340\n        if (this.options.domEvents) {                                                                                 // 2341\n            triggerDomEvent(event, data);                                                                             // 2342\n        }                                                                                                             // 2343\n                                                                                                                      // 2344\n        // no handlers, so skip it all                                                                                // 2345\n        var handlers = this.handlers[event] && this.handlers[event].slice();                                          // 2346\n        if (!handlers || !handlers.length) {                                                                          // 2347\n            return;                                                                                                   // 2348\n        }                                                                                                             // 2349\n                                                                                                                      // 2350\n        data.type = event;                                                                                            // 2351\n        data.preventDefault = function() {                                                                            // 2352\n            data.srcEvent.preventDefault();                                                                           // 2353\n        };                                                                                                            // 2354\n                                                                                                                      // 2355\n        var i = 0;                                                                                                    // 2356\n        while (i < handlers.length) {                                                                                 // 2357\n            handlers[i](data);                                                                                        // 2358\n            i++;                                                                                                      // 2359\n        }                                                                                                             // 2360\n    },                                                                                                                // 2361\n                                                                                                                      // 2362\n    /**                                                                                                               // 2363\n     * destroy the manager and unbinds all events                                                                     // 2364\n     * it doesn't unbind dom events, that is the user own responsibility                                              // 2365\n     */                                                                                                               // 2366\n    destroy: function() {                                                                                             // 2367\n        this.element && toggleCssProps(this, false);                                                                  // 2368\n                                                                                                                      // 2369\n        this.handlers = {};                                                                                           // 2370\n        this.session = {};                                                                                            // 2371\n        this.input.destroy();                                                                                         // 2372\n        this.element = null;                                                                                          // 2373\n    }                                                                                                                 // 2374\n};                                                                                                                    // 2375\n                                                                                                                      // 2376\n/**                                                                                                                   // 2377\n * add/remove the css properties as defined in manager.options.cssProps                                               // 2378\n * @param {Manager} manager                                                                                           // 2379\n * @param {Boolean} add                                                                                               // 2380\n */                                                                                                                   // 2381\nfunction toggleCssProps(manager, add) {                                                                               // 2382\n    var element = manager.element;                                                                                    // 2383\n    each(manager.options.cssProps, function(value, name) {                                                            // 2384\n        element.style[prefixed(element.style, name)] = add ? value : '';                                              // 2385\n    });                                                                                                               // 2386\n}                                                                                                                     // 2387\n                                                                                                                      // 2388\n/**                                                                                                                   // 2389\n * trigger dom event                                                                                                  // 2390\n * @param {String} event                                                                                              // 2391\n * @param {Object} data                                                                                               // 2392\n */                                                                                                                   // 2393\nfunction triggerDomEvent(event, data) {                                                                               // 2394\n    var gestureEvent = document.createEvent('Event');                                                                 // 2395\n    gestureEvent.initEvent(event, true, true);                                                                        // 2396\n    gestureEvent.gesture = data;                                                                                      // 2397\n    data.target.dispatchEvent(gestureEvent);                                                                          // 2398\n}                                                                                                                     // 2399\n                                                                                                                      // 2400\nextend(Hammer, {                                                                                                      // 2401\n    INPUT_START: INPUT_START,                                                                                         // 2402\n    INPUT_MOVE: INPUT_MOVE,                                                                                           // 2403\n    INPUT_END: INPUT_END,                                                                                             // 2404\n    INPUT_CANCEL: INPUT_CANCEL,                                                                                       // 2405\n                                                                                                                      // 2406\n    STATE_POSSIBLE: STATE_POSSIBLE,                                                                                   // 2407\n    STATE_BEGAN: STATE_BEGAN,                                                                                         // 2408\n    STATE_CHANGED: STATE_CHANGED,                                                                                     // 2409\n    STATE_ENDED: STATE_ENDED,                                                                                         // 2410\n    STATE_RECOGNIZED: STATE_RECOGNIZED,                                                                               // 2411\n    STATE_CANCELLED: STATE_CANCELLED,                                                                                 // 2412\n    STATE_FAILED: STATE_FAILED,                                                                                       // 2413\n                                                                                                                      // 2414\n    DIRECTION_NONE: DIRECTION_NONE,                                                                                   // 2415\n    DIRECTION_LEFT: DIRECTION_LEFT,                                                                                   // 2416\n    DIRECTION_RIGHT: DIRECTION_RIGHT,                                                                                 // 2417\n    DIRECTION_UP: DIRECTION_UP,                                                                                       // 2418\n    DIRECTION_DOWN: DIRECTION_DOWN,                                                                                   // 2419\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,                                                                       // 2420\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,                                                                           // 2421\n    DIRECTION_ALL: DIRECTION_ALL,                                                                                     // 2422\n                                                                                                                      // 2423\n    Manager: Manager,                                                                                                 // 2424\n    Input: Input,                                                                                                     // 2425\n    TouchAction: TouchAction,                                                                                         // 2426\n                                                                                                                      // 2427\n    TouchInput: TouchInput,                                                                                           // 2428\n    MouseInput: MouseInput,                                                                                           // 2429\n    PointerEventInput: PointerEventInput,                                                                             // 2430\n    TouchMouseInput: TouchMouseInput,                                                                                 // 2431\n    SingleTouchInput: SingleTouchInput,                                                                               // 2432\n                                                                                                                      // 2433\n    Recognizer: Recognizer,                                                                                           // 2434\n    AttrRecognizer: AttrRecognizer,                                                                                   // 2435\n    Tap: TapRecognizer,                                                                                               // 2436\n    Pan: PanRecognizer,                                                                                               // 2437\n    Swipe: SwipeRecognizer,                                                                                           // 2438\n    Pinch: PinchRecognizer,                                                                                           // 2439\n    Rotate: RotateRecognizer,                                                                                         // 2440\n    Press: PressRecognizer,                                                                                           // 2441\n                                                                                                                      // 2442\n    on: addEventListeners,                                                                                            // 2443\n    off: removeEventListeners,                                                                                        // 2444\n    each: each,                                                                                                       // 2445\n    merge: merge,                                                                                                     // 2446\n    extend: extend,                                                                                                   // 2447\n    inherit: inherit,                                                                                                 // 2448\n    bindFn: bindFn,                                                                                                   // 2449\n    prefixed: prefixed                                                                                                // 2450\n});                                                                                                                   // 2451\n                                                                                                                      // 2452\nif (typeof define == TYPE_FUNCTION && define.amd) {                                                                   // 2453\n    define(function() {                                                                                               // 2454\n        return Hammer;                                                                                                // 2455\n    });                                                                                                               // 2456\n} else if (typeof module != 'undefined' && module.exports) {                                                          // 2457\n    module.exports = Hammer;                                                                                          // 2458\n} else {                                                                                                              // 2459\n    window[exportName] = Hammer;                                                                                      // 2460\n}                                                                                                                     // 2461\n                                                                                                                      // 2462\n})(window, document, 'Hammer');                                                                                       // 2463\n                                                                                                                      // 2464\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}